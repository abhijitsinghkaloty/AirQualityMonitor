
airqual5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039a4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003b38  08003b38  00013b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ba4  08003ba4  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08003ba4  08003ba4  00013ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003bac  08003bac  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bac  08003bac  00013bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bb0  08003bb0  00013bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003bb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  2000001c  08003bd0  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08003bd0  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d037  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e31  00000000  00000000  0002d083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c18  00000000  00000000  0002eeb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b68  00000000  00000000  0002fad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000167af  00000000  00000000  00030638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e2a9  00000000  00000000  00046de7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000882e4  00000000  00000000  00055090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dd374  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031dc  00000000  00000000  000dd3c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000001c 	.word	0x2000001c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003b20 	.word	0x08003b20

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000020 	.word	0x20000020
 80001d0:	08003b20 	.word	0x08003b20

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 80004e2:	4a38      	ldr	r2, [pc, #224]	; (80005c4 <HD44780_Init+0xec>)
 80004e4:	79fb      	ldrb	r3, [r7, #7]
 80004e6:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 80004e8:	4b37      	ldr	r3, [pc, #220]	; (80005c8 <HD44780_Init+0xf0>)
 80004ea:	2208      	movs	r2, #8
 80004ec:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80004ee:	4b37      	ldr	r3, [pc, #220]	; (80005cc <HD44780_Init+0xf4>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 80004f4:	4b33      	ldr	r3, [pc, #204]	; (80005c4 <HD44780_Init+0xec>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d907      	bls.n	800050c <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 80004fc:	4b33      	ldr	r3, [pc, #204]	; (80005cc <HD44780_Init+0xf4>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	f043 0308 	orr.w	r3, r3, #8
 8000504:	b2da      	uxtb	r2, r3
 8000506:	4b31      	ldr	r3, [pc, #196]	; (80005cc <HD44780_Init+0xf4>)
 8000508:	701a      	strb	r2, [r3, #0]
 800050a:	e006      	b.n	800051a <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 800050c:	4b2f      	ldr	r3, [pc, #188]	; (80005cc <HD44780_Init+0xf4>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	f043 0304 	orr.w	r3, r3, #4
 8000514:	b2da      	uxtb	r2, r3
 8000516:	4b2d      	ldr	r3, [pc, #180]	; (80005cc <HD44780_Init+0xf4>)
 8000518:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800051a:	f000 f985 	bl	8000828 <DelayInit>
  HAL_Delay(50);
 800051e:	2032      	movs	r0, #50	; 0x32
 8000520:	f000 ff96 	bl	8001450 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000524:	4b28      	ldr	r3, [pc, #160]	; (80005c8 <HD44780_Init+0xf0>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	4618      	mov	r0, r3
 800052a:	f000 f943 	bl	80007b4 <ExpanderWrite>
  HAL_Delay(1000);
 800052e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000532:	f000 ff8d 	bl	8001450 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000536:	2030      	movs	r0, #48	; 0x30
 8000538:	f000 f92b 	bl	8000792 <Write4Bits>
  DelayUS(4500);
 800053c:	f241 1094 	movw	r0, #4500	; 0x1194
 8000540:	f000 f99c 	bl	800087c <DelayUS>

  Write4Bits(0x03 << 4);
 8000544:	2030      	movs	r0, #48	; 0x30
 8000546:	f000 f924 	bl	8000792 <Write4Bits>
  DelayUS(4500);
 800054a:	f241 1094 	movw	r0, #4500	; 0x1194
 800054e:	f000 f995 	bl	800087c <DelayUS>

  Write4Bits(0x03 << 4);
 8000552:	2030      	movs	r0, #48	; 0x30
 8000554:	f000 f91d 	bl	8000792 <Write4Bits>
  DelayUS(4500);
 8000558:	f241 1094 	movw	r0, #4500	; 0x1194
 800055c:	f000 f98e 	bl	800087c <DelayUS>

  Write4Bits(0x02 << 4);
 8000560:	2020      	movs	r0, #32
 8000562:	f000 f916 	bl	8000792 <Write4Bits>
  DelayUS(100);
 8000566:	2064      	movs	r0, #100	; 0x64
 8000568:	f000 f988 	bl	800087c <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 800056c:	4b17      	ldr	r3, [pc, #92]	; (80005cc <HD44780_Init+0xf4>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	f043 0320 	orr.w	r3, r3, #32
 8000574:	b2db      	uxtb	r3, r3
 8000576:	4618      	mov	r0, r3
 8000578:	f000 f8ce 	bl	8000718 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800057c:	4b14      	ldr	r3, [pc, #80]	; (80005d0 <HD44780_Init+0xf8>)
 800057e:	2204      	movs	r2, #4
 8000580:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000582:	f000 f875 	bl	8000670 <HD44780_Display>
  HD44780_Clear();
 8000586:	f000 f82b 	bl	80005e0 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800058a:	4b12      	ldr	r3, [pc, #72]	; (80005d4 <HD44780_Init+0xfc>)
 800058c:	2202      	movs	r2, #2
 800058e:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000590:	4b10      	ldr	r3, [pc, #64]	; (80005d4 <HD44780_Init+0xfc>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	f043 0304 	orr.w	r3, r3, #4
 8000598:	b2db      	uxtb	r3, r3
 800059a:	4618      	mov	r0, r3
 800059c:	f000 f8bc 	bl	8000718 <SendCommand>
  DelayUS(4500);
 80005a0:	f241 1094 	movw	r0, #4500	; 0x1194
 80005a4:	f000 f96a 	bl	800087c <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 80005a8:	490b      	ldr	r1, [pc, #44]	; (80005d8 <HD44780_Init+0x100>)
 80005aa:	2000      	movs	r0, #0
 80005ac:	f000 f876 	bl	800069c <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80005b0:	490a      	ldr	r1, [pc, #40]	; (80005dc <HD44780_Init+0x104>)
 80005b2:	2001      	movs	r0, #1
 80005b4:	f000 f872 	bl	800069c <HD44780_CreateSpecialChar>

  HD44780_Home();
 80005b8:	f000 f81d 	bl	80005f6 <HD44780_Home>
}
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	2000003b 	.word	0x2000003b
 80005c8:	2000003c 	.word	0x2000003c
 80005cc:	20000038 	.word	0x20000038
 80005d0:	20000039 	.word	0x20000039
 80005d4:	2000003a 	.word	0x2000003a
 80005d8:	20000000 	.word	0x20000000
 80005dc:	20000008 	.word	0x20000008

080005e0 <HD44780_Clear>:

void HD44780_Clear()
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 80005e4:	2001      	movs	r0, #1
 80005e6:	f000 f897 	bl	8000718 <SendCommand>
  DelayUS(2000);
 80005ea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005ee:	f000 f945 	bl	800087c <DelayUS>
}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}

080005f6 <HD44780_Home>:

void HD44780_Home()
{
 80005f6:	b580      	push	{r7, lr}
 80005f8:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80005fa:	2002      	movs	r0, #2
 80005fc:	f000 f88c 	bl	8000718 <SendCommand>
  DelayUS(2000);
 8000600:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000604:	f000 f93a 	bl	800087c <DelayUS>
}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}

0800060c <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 800060c:	b590      	push	{r4, r7, lr}
 800060e:	b087      	sub	sp, #28
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	460a      	mov	r2, r1
 8000616:	71fb      	strb	r3, [r7, #7]
 8000618:	4613      	mov	r3, r2
 800061a:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <HD44780_SetCursor+0x5c>)
 800061e:	f107 0408 	add.w	r4, r7, #8
 8000622:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000624:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000628:	4b10      	ldr	r3, [pc, #64]	; (800066c <HD44780_SetCursor+0x60>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	79ba      	ldrb	r2, [r7, #6]
 800062e:	429a      	cmp	r2, r3
 8000630:	d303      	bcc.n	800063a <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <HD44780_SetCursor+0x60>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	3b01      	subs	r3, #1
 8000638:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800063a:	79bb      	ldrb	r3, [r7, #6]
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	3318      	adds	r3, #24
 8000640:	443b      	add	r3, r7
 8000642:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000646:	b2da      	uxtb	r2, r3
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	4413      	add	r3, r2
 800064c:	b2db      	uxtb	r3, r3
 800064e:	b25b      	sxtb	r3, r3
 8000650:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000654:	b25b      	sxtb	r3, r3
 8000656:	b2db      	uxtb	r3, r3
 8000658:	4618      	mov	r0, r3
 800065a:	f000 f85d 	bl	8000718 <SendCommand>
}
 800065e:	bf00      	nop
 8000660:	371c      	adds	r7, #28
 8000662:	46bd      	mov	sp, r7
 8000664:	bd90      	pop	{r4, r7, pc}
 8000666:	bf00      	nop
 8000668:	08003b38 	.word	0x08003b38
 800066c:	2000003b 	.word	0x2000003b

08000670 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000674:	4b08      	ldr	r3, [pc, #32]	; (8000698 <HD44780_Display+0x28>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	f043 0304 	orr.w	r3, r3, #4
 800067c:	b2da      	uxtb	r2, r3
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <HD44780_Display+0x28>)
 8000680:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000682:	4b05      	ldr	r3, [pc, #20]	; (8000698 <HD44780_Display+0x28>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	f043 0308 	orr.w	r3, r3, #8
 800068a:	b2db      	uxtb	r3, r3
 800068c:	4618      	mov	r0, r3
 800068e:	f000 f843 	bl	8000718 <SendCommand>
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000039 	.word	0x20000039

0800069c <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	6039      	str	r1, [r7, #0]
 80006a6:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	f003 0307 	and.w	r3, r3, #7
 80006ae:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	00db      	lsls	r3, r3, #3
 80006b4:	b25b      	sxtb	r3, r3
 80006b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006ba:	b25b      	sxtb	r3, r3
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 f82a 	bl	8000718 <SendCommand>
  for (int i=0; i<8; i++)
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	e009      	b.n	80006de <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	683a      	ldr	r2, [r7, #0]
 80006ce:	4413      	add	r3, r2
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	4618      	mov	r0, r3
 80006d4:	f000 f82e 	bl	8000734 <SendChar>
  for (int i=0; i<8; i++)
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	3301      	adds	r3, #1
 80006dc:	60fb      	str	r3, [r7, #12]
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	2b07      	cmp	r3, #7
 80006e2:	ddf2      	ble.n	80006ca <HD44780_CreateSpecialChar+0x2e>
  }
}
 80006e4:	bf00      	nop
 80006e6:	bf00      	nop
 80006e8:	3710      	adds	r7, #16
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}

080006ee <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b082      	sub	sp, #8
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80006f6:	e006      	b.n	8000706 <HD44780_PrintStr+0x18>
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	1c5a      	adds	r2, r3, #1
 80006fc:	607a      	str	r2, [r7, #4]
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	4618      	mov	r0, r3
 8000702:	f000 f817 	bl	8000734 <SendChar>
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d1f4      	bne.n	80006f8 <HD44780_PrintStr+0xa>
}
 800070e:	bf00      	nop
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f000 f812 	bl	8000750 <Send>
}
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	2101      	movs	r1, #1
 8000742:	4618      	mov	r0, r3
 8000744:	f000 f804 	bl	8000750 <Send>
}
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	460a      	mov	r2, r1
 800075a:	71fb      	strb	r3, [r7, #7]
 800075c:	4613      	mov	r3, r2
 800075e:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	f023 030f 	bic.w	r3, r3, #15
 8000766:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	011b      	lsls	r3, r3, #4
 800076c:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 800076e:	7bfa      	ldrb	r2, [r7, #15]
 8000770:	79bb      	ldrb	r3, [r7, #6]
 8000772:	4313      	orrs	r3, r2
 8000774:	b2db      	uxtb	r3, r3
 8000776:	4618      	mov	r0, r3
 8000778:	f000 f80b 	bl	8000792 <Write4Bits>
  Write4Bits((lownib)|mode);
 800077c:	7bba      	ldrb	r2, [r7, #14]
 800077e:	79bb      	ldrb	r3, [r7, #6]
 8000780:	4313      	orrs	r3, r2
 8000782:	b2db      	uxtb	r3, r3
 8000784:	4618      	mov	r0, r3
 8000786:	f000 f804 	bl	8000792 <Write4Bits>
}
 800078a:	bf00      	nop
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	b082      	sub	sp, #8
 8000796:	af00      	add	r7, sp, #0
 8000798:	4603      	mov	r3, r0
 800079a:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 f808 	bl	80007b4 <ExpanderWrite>
  PulseEnable(value);
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	4618      	mov	r0, r3
 80007a8:	f000 f820 	bl	80007ec <PulseEnable>
}
 80007ac:	bf00      	nop
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af02      	add	r7, sp, #8
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <ExpanderWrite+0x30>)
 80007c0:	781a      	ldrb	r2, [r3, #0]
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	4313      	orrs	r3, r2
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80007ca:	f107 020f 	add.w	r2, r7, #15
 80007ce:	230a      	movs	r3, #10
 80007d0:	9300      	str	r3, [sp, #0]
 80007d2:	2301      	movs	r3, #1
 80007d4:	214e      	movs	r1, #78	; 0x4e
 80007d6:	4804      	ldr	r0, [pc, #16]	; (80007e8 <ExpanderWrite+0x34>)
 80007d8:	f001 fa40 	bl	8001c5c <HAL_I2C_Master_Transmit>
}
 80007dc:	bf00      	nop
 80007de:	3710      	adds	r7, #16
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	2000003c 	.word	0x2000003c
 80007e8:	20000040 	.word	0x20000040

080007ec <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	f043 0304 	orr.w	r3, r3, #4
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff ffd8 	bl	80007b4 <ExpanderWrite>
  DelayUS(20);
 8000804:	2014      	movs	r0, #20
 8000806:	f000 f839 	bl	800087c <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	f023 0304 	bic.w	r3, r3, #4
 8000810:	b2db      	uxtb	r3, r3
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff ffce 	bl	80007b4 <ExpanderWrite>
  DelayUS(20);
 8000818:	2014      	movs	r0, #20
 800081a:	f000 f82f 	bl	800087c <DelayUS>
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
	...

08000828 <DelayInit>:

static void DelayInit(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 800082c:	4b11      	ldr	r3, [pc, #68]	; (8000874 <DelayInit+0x4c>)
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	4a10      	ldr	r2, [pc, #64]	; (8000874 <DelayInit+0x4c>)
 8000832:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000836:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000838:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <DelayInit+0x4c>)
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	4a0d      	ldr	r2, [pc, #52]	; (8000874 <DelayInit+0x4c>)
 800083e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000842:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <DelayInit+0x50>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a0b      	ldr	r2, [pc, #44]	; (8000878 <DelayInit+0x50>)
 800084a:	f023 0301 	bic.w	r3, r3, #1
 800084e:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <DelayInit+0x50>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a08      	ldr	r2, [pc, #32]	; (8000878 <DelayInit+0x50>)
 8000856:	f043 0301 	orr.w	r3, r3, #1
 800085a:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <DelayInit+0x50>)
 800085e:	2200      	movs	r2, #0
 8000860:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000862:	bf00      	nop
  __ASM volatile ("NOP");
 8000864:	bf00      	nop
  __ASM volatile ("NOP");
 8000866:	bf00      	nop
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	e000edf0 	.word	0xe000edf0
 8000878:	e0001000 	.word	0xe0001000

0800087c <DelayUS>:

static void DelayUS(uint32_t us) {
 800087c:	b480      	push	{r7}
 800087e:	b087      	sub	sp, #28
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000884:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <DelayUS+0x44>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a0e      	ldr	r2, [pc, #56]	; (80008c4 <DelayUS+0x48>)
 800088a:	fba2 2303 	umull	r2, r3, r2, r3
 800088e:	0c9a      	lsrs	r2, r3, #18
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	fb02 f303 	mul.w	r3, r2, r3
 8000896:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000898:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <DelayUS+0x4c>)
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800089e:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <DelayUS+0x4c>)
 80008a0:	685a      	ldr	r2, [r3, #4]
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	697a      	ldr	r2, [r7, #20]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d8f6      	bhi.n	800089e <DelayUS+0x22>
 80008b0:	bf00      	nop
 80008b2:	bf00      	nop
 80008b4:	371c      	adds	r7, #28
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	20000010 	.word	0x20000010
 80008c4:	431bde83 	.word	0x431bde83
 80008c8:	e0001000 	.word	0xe0001000

080008cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b088      	sub	sp, #32
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d2:	f000 fd4b 	bl	800136c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d6:	f000 f87f 	bl	80009d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008da:	f000 f941 	bl	8000b60 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008de:	f000 f915 	bl	8000b0c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80008e2:	f000 f8e5 	bl	8000ab0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /*SCD40 begin*/
  int16_t error = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	837b      	strh	r3, [r7, #26]
  if(HAL_I2C_IsDeviceReady(&hi2c1, 0x62 << 1, 2, 10) == HAL_OK)
 80008ea:	230a      	movs	r3, #10
 80008ec:	2202      	movs	r2, #2
 80008ee:	21c4      	movs	r1, #196	; 0xc4
 80008f0:	4834      	ldr	r0, [pc, #208]	; (80009c4 <main+0xf8>)
 80008f2:	f001 fcd7 	bl	80022a4 <HAL_I2C_IsDeviceReady>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d103      	bne.n	8000904 <main+0x38>
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80008fc:	2120      	movs	r1, #32
 80008fe:	4832      	ldr	r0, [pc, #200]	; (80009c8 <main+0xfc>)
 8000900:	f001 f84d 	bl	800199e <HAL_GPIO_TogglePin>
  }
//  sensirion_i2c_hal_init();

  // Clean up potential SCD40 states
  scd4x_wake_up();
 8000904:	f000 fa9c 	bl	8000e40 <scd4x_wake_up>
  scd4x_stop_periodic_measurement();
 8000908:	f000 fa4c 	bl	8000da4 <scd4x_stop_periodic_measurement>
  scd4x_reinit();
 800090c:	f000 fa72 	bl	8000df4 <scd4x_reinit>

  scd4x_start_periodic_measurement();
 8000910:	f000 f999 	bl	8000c46 <scd4x_start_periodic_measurement>

  /*SCD40 End*/

  /*LCD begin*/
  HD44780_Init(2);
 8000914:	2002      	movs	r0, #2
 8000916:	f7ff fddf 	bl	80004d8 <HD44780_Init>
  HD44780_Clear();
 800091a:	f7ff fe61 	bl	80005e0 <HD44780_Clear>
  HD44780_SetCursor(0,0);
 800091e:	2100      	movs	r1, #0
 8000920:	2000      	movs	r0, #0
 8000922:	f7ff fe73 	bl	800060c <HD44780_SetCursor>
  HD44780_PrintStr("Loading...(1m)");
 8000926:	4829      	ldr	r0, [pc, #164]	; (80009cc <main+0x100>)
 8000928:	f7ff fee1 	bl	80006ee <HD44780_PrintStr>

  HAL_Delay(2000);
 800092c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000930:	f000 fd8e 	bl	8001450 <HAL_Delay>
//    HD44780_ScrollDisplayLeft();  //HD44780_ScrollDisplayRight();
//    HAL_Delay(500);
//  }

  char snum[5];
  for ( int x = 1; x <= 60 ; x++ )
 8000934:	2301      	movs	r3, #1
 8000936:	61fb      	str	r3, [r7, #28]
 8000938:	e016      	b.n	8000968 <main+0x9c>
  {
    itoa(x, snum, 10);
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	220a      	movs	r2, #10
 8000940:	4619      	mov	r1, r3
 8000942:	69f8      	ldr	r0, [r7, #28]
 8000944:	f003 f8a0 	bl	8003a88 <itoa>
//    HD44780_Clear();
    HD44780_SetCursor(0,1);
 8000948:	2101      	movs	r1, #1
 800094a:	2000      	movs	r0, #0
 800094c:	f7ff fe5e 	bl	800060c <HD44780_SetCursor>
    HD44780_PrintStr(snum);
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff feca 	bl	80006ee <HD44780_PrintStr>
    HAL_Delay (1000);
 800095a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800095e:	f000 fd77 	bl	8001450 <HAL_Delay>
  for ( int x = 1; x <= 60 ; x++ )
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	3301      	adds	r3, #1
 8000966:	61fb      	str	r3, [r7, #28]
 8000968:	69fb      	ldr	r3, [r7, #28]
 800096a:	2b3c      	cmp	r3, #60	; 0x3c
 800096c:	dde5      	ble.n	800093a <main+0x6e>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  sensirion_i2c_hal_sleep_usec(100000);
 800096e:	4818      	ldr	r0, [pc, #96]	; (80009d0 <main+0x104>)
 8000970:	f000 fbbc 	bl	80010ec <sensirion_i2c_hal_sleep_usec>
	  bool data_ready_flag = false;
 8000974:	2300      	movs	r3, #0
 8000976:	767b      	strb	r3, [r7, #25]
//	          }

	  uint16_t co2;
	  int32_t temperature;
	  int32_t humidity;
	  scd4x_read_measurement(&co2, &temperature, &humidity);
 8000978:	f107 0208 	add.w	r2, r7, #8
 800097c:	f107 010c 	add.w	r1, r7, #12
 8000980:	f107 0312 	add.w	r3, r7, #18
 8000984:	4618      	mov	r0, r3
 8000986:	f000 f9dc 	bl	8000d42 <scd4x_read_measurement>
	  HD44780_Clear();
 800098a:	f7ff fe29 	bl	80005e0 <HD44780_Clear>
	  HD44780_SetCursor(0,0);
 800098e:	2100      	movs	r1, #0
 8000990:	2000      	movs	r0, #0
 8000992:	f7ff fe3b 	bl	800060c <HD44780_SetCursor>
	  char co2a[5];
	  itoa(co2, co2a, 10);
 8000996:	8a7b      	ldrh	r3, [r7, #18]
 8000998:	4618      	mov	r0, r3
 800099a:	463b      	mov	r3, r7
 800099c:	220a      	movs	r2, #10
 800099e:	4619      	mov	r1, r3
 80009a0:	f003 f872 	bl	8003a88 <itoa>
	  HD44780_PrintStr("CO2...(ppm)");
 80009a4:	480b      	ldr	r0, [pc, #44]	; (80009d4 <main+0x108>)
 80009a6:	f7ff fea2 	bl	80006ee <HD44780_PrintStr>
	  HD44780_SetCursor(0,1);
 80009aa:	2101      	movs	r1, #1
 80009ac:	2000      	movs	r0, #0
 80009ae:	f7ff fe2d 	bl	800060c <HD44780_SetCursor>
	  HD44780_PrintStr(co2a);
 80009b2:	463b      	mov	r3, r7
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff fe9a 	bl	80006ee <HD44780_PrintStr>
	  HAL_Delay(5000);
 80009ba:	f241 3088 	movw	r0, #5000	; 0x1388
 80009be:	f000 fd47 	bl	8001450 <HAL_Delay>
  {
 80009c2:	e7d4      	b.n	800096e <main+0xa2>
 80009c4:	20000040 	.word	0x20000040
 80009c8:	40020000 	.word	0x40020000
 80009cc:	08003b48 	.word	0x08003b48
 80009d0:	000186a0 	.word	0x000186a0
 80009d4:	08003b58 	.word	0x08003b58

080009d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b094      	sub	sp, #80	; 0x50
 80009dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009de:	f107 0320 	add.w	r3, r7, #32
 80009e2:	2230      	movs	r2, #48	; 0x30
 80009e4:	2100      	movs	r1, #0
 80009e6:	4618      	mov	r0, r3
 80009e8:	f003 f850 	bl	8003a8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ec:	f107 030c 	add.w	r3, r7, #12
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fc:	2300      	movs	r3, #0
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	4b29      	ldr	r3, [pc, #164]	; (8000aa8 <SystemClock_Config+0xd0>)
 8000a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a04:	4a28      	ldr	r2, [pc, #160]	; (8000aa8 <SystemClock_Config+0xd0>)
 8000a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0c:	4b26      	ldr	r3, [pc, #152]	; (8000aa8 <SystemClock_Config+0xd0>)
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a14:	60bb      	str	r3, [r7, #8]
 8000a16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a18:	2300      	movs	r3, #0
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	4b23      	ldr	r3, [pc, #140]	; (8000aac <SystemClock_Config+0xd4>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a24:	4a21      	ldr	r2, [pc, #132]	; (8000aac <SystemClock_Config+0xd4>)
 8000a26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a2a:	6013      	str	r3, [r2, #0]
 8000a2c:	4b1f      	ldr	r3, [pc, #124]	; (8000aac <SystemClock_Config+0xd4>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a40:	2310      	movs	r3, #16
 8000a42:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a44:	2302      	movs	r3, #2
 8000a46:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a4c:	2310      	movs	r3, #16
 8000a4e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a50:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a54:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a56:	2304      	movs	r3, #4
 8000a58:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a5a:	2307      	movs	r3, #7
 8000a5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5e:	f107 0320 	add.w	r3, r7, #32
 8000a62:	4618      	mov	r0, r3
 8000a64:	f002 f87a 	bl	8002b5c <HAL_RCC_OscConfig>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a6e:	f000 f8e5 	bl	8000c3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a72:	230f      	movs	r3, #15
 8000a74:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a76:	2302      	movs	r3, #2
 8000a78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a82:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a88:	f107 030c 	add.w	r3, r7, #12
 8000a8c:	2102      	movs	r1, #2
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f002 fadc 	bl	800304c <HAL_RCC_ClockConfig>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000a9a:	f000 f8cf 	bl	8000c3c <Error_Handler>
  }
}
 8000a9e:	bf00      	nop
 8000aa0:	3750      	adds	r7, #80	; 0x50
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40007000 	.word	0x40007000

08000ab0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000ab6:	4a13      	ldr	r2, [pc, #76]	; (8000b04 <MX_I2C1_Init+0x54>)
 8000ab8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000abc:	4a12      	ldr	r2, [pc, #72]	; (8000b08 <MX_I2C1_Init+0x58>)
 8000abe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000ace:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ad2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ae0:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000aec:	4804      	ldr	r0, [pc, #16]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000aee:	f000 ff71 	bl	80019d4 <HAL_I2C_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000af8:	f000 f8a0 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000040 	.word	0x20000040
 8000b04:	40005400 	.word	0x40005400
 8000b08:	000186a0 	.word	0x000186a0

08000b0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b10:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b12:	4a12      	ldr	r2, [pc, #72]	; (8000b5c <MX_USART2_UART_Init+0x50>)
 8000b14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b32:	220c      	movs	r2, #12
 8000b34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b42:	4805      	ldr	r0, [pc, #20]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b44:	f002 fca2 	bl	800348c <HAL_UART_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b4e:	f000 f875 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000094 	.word	0x20000094
 8000b5c:	40004400 	.word	0x40004400

08000b60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	; 0x28
 8000b64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
 8000b74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	4b2d      	ldr	r3, [pc, #180]	; (8000c30 <MX_GPIO_Init+0xd0>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a2c      	ldr	r2, [pc, #176]	; (8000c30 <MX_GPIO_Init+0xd0>)
 8000b80:	f043 0304 	orr.w	r3, r3, #4
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b2a      	ldr	r3, [pc, #168]	; (8000c30 <MX_GPIO_Init+0xd0>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0304 	and.w	r3, r3, #4
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	4b26      	ldr	r3, [pc, #152]	; (8000c30 <MX_GPIO_Init+0xd0>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a25      	ldr	r2, [pc, #148]	; (8000c30 <MX_GPIO_Init+0xd0>)
 8000b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b23      	ldr	r3, [pc, #140]	; (8000c30 <MX_GPIO_Init+0xd0>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	4b1f      	ldr	r3, [pc, #124]	; (8000c30 <MX_GPIO_Init+0xd0>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a1e      	ldr	r2, [pc, #120]	; (8000c30 <MX_GPIO_Init+0xd0>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b1c      	ldr	r3, [pc, #112]	; (8000c30 <MX_GPIO_Init+0xd0>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	4b18      	ldr	r3, [pc, #96]	; (8000c30 <MX_GPIO_Init+0xd0>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a17      	ldr	r2, [pc, #92]	; (8000c30 <MX_GPIO_Init+0xd0>)
 8000bd4:	f043 0302 	orr.w	r3, r3, #2
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <MX_GPIO_Init+0xd0>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0302 	and.w	r3, r3, #2
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2120      	movs	r1, #32
 8000bea:	4812      	ldr	r0, [pc, #72]	; (8000c34 <MX_GPIO_Init+0xd4>)
 8000bec:	f000 febe 	bl	800196c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bf6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	4619      	mov	r1, r3
 8000c06:	480c      	ldr	r0, [pc, #48]	; (8000c38 <MX_GPIO_Init+0xd8>)
 8000c08:	f000 fd2c 	bl	8001664 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c0c:	2320      	movs	r3, #32
 8000c0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c10:	2301      	movs	r3, #1
 8000c12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4619      	mov	r1, r3
 8000c22:	4804      	ldr	r0, [pc, #16]	; (8000c34 <MX_GPIO_Init+0xd4>)
 8000c24:	f000 fd1e 	bl	8001664 <HAL_GPIO_Init>

}
 8000c28:	bf00      	nop
 8000c2a:	3728      	adds	r7, #40	; 0x28
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40020000 	.word	0x40020000
 8000c38:	40020800 	.word	0x40020800

08000c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c40:	b672      	cpsid	i
}
 8000c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <Error_Handler+0x8>

08000c46 <scd4x_start_periodic_measurement>:
#include "sensirion_i2c.h"
#include "sensirion_i2c_hal.h"

#define SCD4X_I2C_ADDRESS 0x62

int16_t scd4x_start_periodic_measurement() {
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21B1);
 8000c50:	88f9      	ldrh	r1, [r7, #6]
 8000c52:	463b      	mov	r3, r7
 8000c54:	f242 12b1 	movw	r2, #8625	; 0x21b1
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f000 f974 	bl	8000f46 <sensirion_i2c_add_command_to_buffer>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8000c62:	88fa      	ldrh	r2, [r7, #6]
 8000c64:	463b      	mov	r3, r7
 8000c66:	4619      	mov	r1, r3
 8000c68:	2062      	movs	r0, #98	; 0x62
 8000c6a:	f000 f98f 	bl	8000f8c <sensirion_i2c_write_data>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	80bb      	strh	r3, [r7, #4]
    if (error) {
 8000c72:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d002      	beq.n	8000c80 <scd4x_start_periodic_measurement+0x3a>
        return error;
 8000c7a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c7e:	e004      	b.n	8000c8a <scd4x_start_periodic_measurement+0x44>
    }
    sensirion_i2c_hal_sleep_usec(1000);
 8000c80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c84:	f000 fa32 	bl	80010ec <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <scd4x_read_measurement_ticks>:

int16_t scd4x_read_measurement_ticks(uint16_t* co2, uint16_t* temperature,
                                     uint16_t* humidity) {
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b088      	sub	sp, #32
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	60f8      	str	r0, [r7, #12]
 8000c9a:	60b9      	str	r1, [r7, #8]
 8000c9c:	607a      	str	r2, [r7, #4]
    int16_t error;
    uint8_t buffer[9];
    uint16_t offset = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	83fb      	strh	r3, [r7, #30]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xEC05);
 8000ca2:	8bf9      	ldrh	r1, [r7, #30]
 8000ca4:	f107 0310 	add.w	r3, r7, #16
 8000ca8:	f64e 4205 	movw	r2, #60421	; 0xec05
 8000cac:	4618      	mov	r0, r3
 8000cae:	f000 f94a 	bl	8000f46 <sensirion_i2c_add_command_to_buffer>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	83fb      	strh	r3, [r7, #30]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8000cb6:	8bfa      	ldrh	r2, [r7, #30]
 8000cb8:	f107 0310 	add.w	r3, r7, #16
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	2062      	movs	r0, #98	; 0x62
 8000cc0:	f000 f964 	bl	8000f8c <sensirion_i2c_write_data>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	83bb      	strh	r3, [r7, #28]
    if (error) {
 8000cc8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d002      	beq.n	8000cd6 <scd4x_read_measurement_ticks+0x44>
        return error;
 8000cd0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000cd4:	e031      	b.n	8000d3a <scd4x_read_measurement_ticks+0xa8>
    }

    sensirion_i2c_hal_sleep_usec(1000);
 8000cd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cda:	f000 fa07 	bl	80010ec <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SCD4X_I2C_ADDRESS, &buffer[0], 6);
 8000cde:	f107 0310 	add.w	r3, r7, #16
 8000ce2:	2206      	movs	r2, #6
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	2062      	movs	r0, #98	; 0x62
 8000ce8:	f000 f964 	bl	8000fb4 <sensirion_i2c_read_data_inplace>
 8000cec:	4603      	mov	r3, r0
 8000cee:	83bb      	strh	r3, [r7, #28]
    if (error) {
 8000cf0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d002      	beq.n	8000cfe <scd4x_read_measurement_ticks+0x6c>
        return error;
 8000cf8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000cfc:	e01d      	b.n	8000d3a <scd4x_read_measurement_ticks+0xa8>
    }
    *co2 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 8000cfe:	f107 0310 	add.w	r3, r7, #16
 8000d02:	4618      	mov	r0, r3
 8000d04:	f000 f8b9 	bl	8000e7a <sensirion_common_bytes_to_uint16_t>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	801a      	strh	r2, [r3, #0]
    *temperature = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 8000d10:	f107 0310 	add.w	r3, r7, #16
 8000d14:	3302      	adds	r3, #2
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 f8af 	bl	8000e7a <sensirion_common_bytes_to_uint16_t>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	461a      	mov	r2, r3
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	801a      	strh	r2, [r3, #0]
    *humidity = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 8000d24:	f107 0310 	add.w	r3, r7, #16
 8000d28:	3304      	adds	r3, #4
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 f8a5 	bl	8000e7a <sensirion_common_bytes_to_uint16_t>
 8000d30:	4603      	mov	r3, r0
 8000d32:	461a      	mov	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3720      	adds	r7, #32
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <scd4x_read_measurement>:

int16_t scd4x_read_measurement(uint16_t* co2, int32_t* temperature_m_deg_c,
                               int32_t* humidity_m_percent_rh) {
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b086      	sub	sp, #24
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	60f8      	str	r0, [r7, #12]
 8000d4a:	60b9      	str	r1, [r7, #8]
 8000d4c:	607a      	str	r2, [r7, #4]
    int16_t error;
    uint16_t temperature;
    uint16_t humidity;

    error = scd4x_read_measurement_ticks(co2, &temperature, &humidity);
 8000d4e:	f107 0212 	add.w	r2, r7, #18
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	4619      	mov	r1, r3
 8000d58:	68f8      	ldr	r0, [r7, #12]
 8000d5a:	f7ff ff9a 	bl	8000c92 <scd4x_read_measurement_ticks>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	82fb      	strh	r3, [r7, #22]
    if (error) {
 8000d62:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d002      	beq.n	8000d70 <scd4x_read_measurement+0x2e>
        return error;
 8000d6a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000d6e:	e015      	b.n	8000d9c <scd4x_read_measurement+0x5a>
    }
    *temperature_m_deg_c = ((21875 * (int32_t)temperature) >> 13) - 45000;
 8000d70:	8abb      	ldrh	r3, [r7, #20]
 8000d72:	461a      	mov	r2, r3
 8000d74:	f245 5373 	movw	r3, #21875	; 0x5573
 8000d78:	fb02 f303 	mul.w	r3, r2, r3
 8000d7c:	135b      	asrs	r3, r3, #13
 8000d7e:	f5a3 432f 	sub.w	r3, r3, #44800	; 0xaf00
 8000d82:	3bc8      	subs	r3, #200	; 0xc8
 8000d84:	68ba      	ldr	r2, [r7, #8]
 8000d86:	6013      	str	r3, [r2, #0]
    *humidity_m_percent_rh = ((12500 * (int32_t)humidity) >> 13);
 8000d88:	8a7b      	ldrh	r3, [r7, #18]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	f243 03d4 	movw	r3, #12500	; 0x30d4
 8000d90:	fb02 f303 	mul.w	r3, r2, r3
 8000d94:	135a      	asrs	r2, r3, #13
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 8000d9a:	2300      	movs	r3, #0
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3718      	adds	r7, #24
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <scd4x_stop_periodic_measurement>:

int16_t scd4x_stop_periodic_measurement() {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3F86);
 8000dae:	88f9      	ldrh	r1, [r7, #6]
 8000db0:	463b      	mov	r3, r7
 8000db2:	f643 7286 	movw	r2, #16262	; 0x3f86
 8000db6:	4618      	mov	r0, r3
 8000db8:	f000 f8c5 	bl	8000f46 <sensirion_i2c_add_command_to_buffer>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8000dc0:	88fa      	ldrh	r2, [r7, #6]
 8000dc2:	463b      	mov	r3, r7
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	2062      	movs	r0, #98	; 0x62
 8000dc8:	f000 f8e0 	bl	8000f8c <sensirion_i2c_write_data>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	80bb      	strh	r3, [r7, #4]
    if (error) {
 8000dd0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d002      	beq.n	8000dde <scd4x_stop_periodic_measurement+0x3a>
        return error;
 8000dd8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ddc:	e003      	b.n	8000de6 <scd4x_stop_periodic_measurement+0x42>
    }
    sensirion_i2c_hal_sleep_usec(500000);
 8000dde:	4804      	ldr	r0, [pc, #16]	; (8000df0 <scd4x_stop_periodic_measurement+0x4c>)
 8000de0:	f000 f984 	bl	80010ec <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	0007a120 	.word	0x0007a120

08000df4 <scd4x_reinit>:
    }
    sensirion_i2c_hal_sleep_usec(800000);
    return NO_ERROR;
}

int16_t scd4x_reinit() {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3646);
 8000dfe:	88f9      	ldrh	r1, [r7, #6]
 8000e00:	463b      	mov	r3, r7
 8000e02:	f243 6246 	movw	r2, #13894	; 0x3646
 8000e06:	4618      	mov	r0, r3
 8000e08:	f000 f89d 	bl	8000f46 <sensirion_i2c_add_command_to_buffer>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8000e10:	88fa      	ldrh	r2, [r7, #6]
 8000e12:	463b      	mov	r3, r7
 8000e14:	4619      	mov	r1, r3
 8000e16:	2062      	movs	r0, #98	; 0x62
 8000e18:	f000 f8b8 	bl	8000f8c <sensirion_i2c_write_data>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	80bb      	strh	r3, [r7, #4]
    if (error) {
 8000e20:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d002      	beq.n	8000e2e <scd4x_reinit+0x3a>
        return error;
 8000e28:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e2c:	e004      	b.n	8000e38 <scd4x_reinit+0x44>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 8000e2e:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000e32:	f000 f95b 	bl	80010ec <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8000e36:	2300      	movs	r3, #0
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <scd4x_wake_up>:
    }
    sensirion_i2c_hal_sleep_usec(1000);
    return NO_ERROR;
}

int16_t scd4x_wake_up() {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
    uint8_t buffer[2];
    uint16_t offset = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x36F6);
 8000e4a:	88f9      	ldrh	r1, [r7, #6]
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	f243 62f6 	movw	r2, #14070	; 0x36f6
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 f877 	bl	8000f46 <sensirion_i2c_add_command_to_buffer>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	80fb      	strh	r3, [r7, #6]

    // Sensor does not acknowledge the wake-up call, error is ignored
    (void)sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8000e5c:	88fa      	ldrh	r2, [r7, #6]
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	4619      	mov	r1, r3
 8000e62:	2062      	movs	r0, #98	; 0x62
 8000e64:	f000 f892 	bl	8000f8c <sensirion_i2c_write_data>
    sensirion_i2c_hal_sleep_usec(20000);
 8000e68:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000e6c:	f000 f93e 	bl	80010ec <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 8000e7a:	b480      	push	{r7}
 8000e7c:	b083      	sub	sp, #12
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	021b      	lsls	r3, r3, #8
 8000e88:	b21a      	sxth	r2, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	b21b      	sxth	r3, r3
 8000e92:	4313      	orrs	r3, r2
 8000e94:	b21b      	sxth	r3, r3
 8000e96:	b29b      	uxth	r3, r3
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sensirion_i2c_hal.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	807b      	strh	r3, [r7, #2]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8000eb0:	23ff      	movs	r3, #255	; 0xff
 8000eb2:	737b      	strb	r3, [r7, #13]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	81fb      	strh	r3, [r7, #14]
 8000eb8:	e021      	b.n	8000efe <sensirion_i2c_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 8000eba:	89fb      	ldrh	r3, [r7, #14]
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	781a      	ldrb	r2, [r3, #0]
 8000ec2:	7b7b      	ldrb	r3, [r7, #13]
 8000ec4:	4053      	eors	r3, r2
 8000ec6:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8000ec8:	2308      	movs	r3, #8
 8000eca:	733b      	strb	r3, [r7, #12]
 8000ecc:	e011      	b.n	8000ef2 <sensirion_i2c_generate_crc+0x4e>
            if (crc & 0x80)
 8000ece:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	da07      	bge.n	8000ee6 <sensirion_i2c_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8000ed6:	7b7b      	ldrb	r3, [r7, #13]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	b25b      	sxtb	r3, r3
 8000edc:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8000ee0:	b25b      	sxtb	r3, r3
 8000ee2:	737b      	strb	r3, [r7, #13]
 8000ee4:	e002      	b.n	8000eec <sensirion_i2c_generate_crc+0x48>
            else
                crc = (crc << 1);
 8000ee6:	7b7b      	ldrb	r3, [r7, #13]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8000eec:	7b3b      	ldrb	r3, [r7, #12]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	733b      	strb	r3, [r7, #12]
 8000ef2:	7b3b      	ldrb	r3, [r7, #12]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d1ea      	bne.n	8000ece <sensirion_i2c_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8000ef8:	89fb      	ldrh	r3, [r7, #14]
 8000efa:	3301      	adds	r3, #1
 8000efc:	81fb      	strh	r3, [r7, #14]
 8000efe:	89fa      	ldrh	r2, [r7, #14]
 8000f00:	887b      	ldrh	r3, [r7, #2]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d3d9      	bcc.n	8000eba <sensirion_i2c_generate_crc+0x16>
        }
    }
    return crc;
 8000f06:	7b7b      	ldrb	r3, [r7, #13]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	807b      	strh	r3, [r7, #2]
 8000f20:	4613      	mov	r3, r2
 8000f22:	707b      	strb	r3, [r7, #1]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 8000f24:	887b      	ldrh	r3, [r7, #2]
 8000f26:	4619      	mov	r1, r3
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f7ff ffbb 	bl	8000ea4 <sensirion_i2c_generate_crc>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	461a      	mov	r2, r3
 8000f32:	787b      	ldrb	r3, [r7, #1]
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d001      	beq.n	8000f3c <sensirion_i2c_check_crc+0x28>
        return CRC_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e000      	b.n	8000f3e <sensirion_i2c_check_crc+0x2a>
    return NO_ERROR;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 8000f46:	b480      	push	{r7}
 8000f48:	b083      	sub	sp, #12
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	807b      	strh	r3, [r7, #2]
 8000f52:	4613      	mov	r3, r2
 8000f54:	803b      	strh	r3, [r7, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 8000f56:	883b      	ldrh	r3, [r7, #0]
 8000f58:	0a1b      	lsrs	r3, r3, #8
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	887b      	ldrh	r3, [r7, #2]
 8000f5e:	1c59      	adds	r1, r3, #1
 8000f60:	8079      	strh	r1, [r7, #2]
 8000f62:	4619      	mov	r1, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	440b      	add	r3, r1
 8000f68:	b2d2      	uxtb	r2, r2
 8000f6a:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 8000f6c:	887b      	ldrh	r3, [r7, #2]
 8000f6e:	1c5a      	adds	r2, r3, #1
 8000f70:	807a      	strh	r2, [r7, #2]
 8000f72:	461a      	mov	r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4413      	add	r3, r2
 8000f78:	883a      	ldrh	r2, [r7, #0]
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	701a      	strb	r2, [r3, #0]
    return offset;
 8000f7e:	887b      	ldrh	r3, [r7, #2]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	6039      	str	r1, [r7, #0]
 8000f96:	71fb      	strb	r3, [r7, #7]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	80bb      	strh	r3, [r7, #4]
    return sensirion_i2c_hal_write(address, data, data_length);
 8000f9c:	88ba      	ldrh	r2, [r7, #4]
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	6839      	ldr	r1, [r7, #0]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 f886 	bl	80010b4 <sensirion_i2c_hal_write>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	b21b      	sxth	r3, r3
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	6039      	str	r1, [r7, #0]
 8000fbe:	71fb      	strb	r3, [r7, #7]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	80bb      	strh	r3, [r7, #4]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 8000fc4:	88bb      	ldrh	r3, [r7, #4]
 8000fc6:	085b      	lsrs	r3, r3, #1
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	461a      	mov	r2, r3
 8000fcc:	0052      	lsls	r2, r2, #1
 8000fce:	4413      	add	r3, r2
 8000fd0:	817b      	strh	r3, [r7, #10]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 8000fd2:	88bb      	ldrh	r3, [r7, #4]
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <sensirion_i2c_read_data_inplace+0x2e>
        return BYTE_NUM_ERROR;
 8000fde:	2304      	movs	r3, #4
 8000fe0:	e047      	b.n	8001072 <sensirion_i2c_read_data_inplace+0xbe>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 8000fe2:	897a      	ldrh	r2, [r7, #10]
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	6839      	ldr	r1, [r7, #0]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 f847 	bl	800107c <sensirion_i2c_hal_read>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	813b      	strh	r3, [r7, #8]
    if (error) {
 8000ff2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d002      	beq.n	8001000 <sensirion_i2c_read_data_inplace+0x4c>
        return error;
 8000ffa:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000ffe:	e038      	b.n	8001072 <sensirion_i2c_read_data_inplace+0xbe>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8001000:	2300      	movs	r3, #0
 8001002:	81fb      	strh	r3, [r7, #14]
 8001004:	2300      	movs	r3, #0
 8001006:	81bb      	strh	r3, [r7, #12]
 8001008:	e02e      	b.n	8001068 <sensirion_i2c_read_data_inplace+0xb4>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800100a:	89fb      	ldrh	r3, [r7, #14]
 800100c:	683a      	ldr	r2, [r7, #0]
 800100e:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 8001010:	89fb      	ldrh	r3, [r7, #14]
 8001012:	3302      	adds	r3, #2
 8001014:	683a      	ldr	r2, [r7, #0]
 8001016:	4413      	add	r3, r2
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	461a      	mov	r2, r3
 800101c:	2102      	movs	r1, #2
 800101e:	f7ff ff79 	bl	8000f14 <sensirion_i2c_check_crc>
 8001022:	4603      	mov	r3, r0
 8001024:	813b      	strh	r3, [r7, #8]
        if (error) {
 8001026:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d002      	beq.n	8001034 <sensirion_i2c_read_data_inplace+0x80>
            return error;
 800102e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001032:	e01e      	b.n	8001072 <sensirion_i2c_read_data_inplace+0xbe>
        }
        buffer[j++] = buffer[i];
 8001034:	89fb      	ldrh	r3, [r7, #14]
 8001036:	683a      	ldr	r2, [r7, #0]
 8001038:	441a      	add	r2, r3
 800103a:	89bb      	ldrh	r3, [r7, #12]
 800103c:	1c59      	adds	r1, r3, #1
 800103e:	81b9      	strh	r1, [r7, #12]
 8001040:	4619      	mov	r1, r3
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	440b      	add	r3, r1
 8001046:	7812      	ldrb	r2, [r2, #0]
 8001048:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 800104a:	89fb      	ldrh	r3, [r7, #14]
 800104c:	3301      	adds	r3, #1
 800104e:	683a      	ldr	r2, [r7, #0]
 8001050:	441a      	add	r2, r3
 8001052:	89bb      	ldrh	r3, [r7, #12]
 8001054:	1c59      	adds	r1, r3, #1
 8001056:	81b9      	strh	r1, [r7, #12]
 8001058:	4619      	mov	r1, r3
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	440b      	add	r3, r1
 800105e:	7812      	ldrb	r2, [r2, #0]
 8001060:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8001062:	89fb      	ldrh	r3, [r7, #14]
 8001064:	3303      	adds	r3, #3
 8001066:	81fb      	strh	r3, [r7, #14]
 8001068:	89fa      	ldrh	r2, [r7, #14]
 800106a:	897b      	ldrh	r3, [r7, #10]
 800106c:	429a      	cmp	r2, r3
 800106e:	d3cc      	bcc.n	800100a <sensirion_i2c_read_data_inplace+0x56>
    }

    return NO_ERROR;
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <sensirion_i2c_hal_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af02      	add	r7, sp, #8
 8001082:	4603      	mov	r3, r0
 8001084:	6039      	str	r1, [r7, #0]
 8001086:	71fb      	strb	r3, [r7, #7]
 8001088:	4613      	mov	r3, r2
 800108a:	80bb      	strh	r3, [r7, #4]
    return (int8_t)HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(address << 1),
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	b29b      	uxth	r3, r3
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	b299      	uxth	r1, r3
 8001094:	88bb      	ldrh	r3, [r7, #4]
 8001096:	2264      	movs	r2, #100	; 0x64
 8001098:	9200      	str	r2, [sp, #0]
 800109a:	683a      	ldr	r2, [r7, #0]
 800109c:	4804      	ldr	r0, [pc, #16]	; (80010b0 <sensirion_i2c_hal_read+0x34>)
 800109e:	f000 fedb 	bl	8001e58 <HAL_I2C_Master_Receive>
 80010a2:	4603      	mov	r3, r0
 80010a4:	b25b      	sxtb	r3, r3
                                          data, count, 100);
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200000d8 	.word	0x200000d8

080010b4 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data,
		uint16_t count) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af02      	add	r7, sp, #8
 80010ba:	4603      	mov	r3, r0
 80010bc:	6039      	str	r1, [r7, #0]
 80010be:	71fb      	strb	r3, [r7, #7]
 80010c0:	4613      	mov	r3, r2
 80010c2:	80bb      	strh	r3, [r7, #4]
	return (int8_t)HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(address << 1),
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	b299      	uxth	r1, r3
 80010cc:	88bb      	ldrh	r3, [r7, #4]
 80010ce:	2264      	movs	r2, #100	; 0x64
 80010d0:	9200      	str	r2, [sp, #0]
 80010d2:	683a      	ldr	r2, [r7, #0]
 80010d4:	4804      	ldr	r0, [pc, #16]	; (80010e8 <sensirion_i2c_hal_write+0x34>)
 80010d6:	f000 fdc1 	bl	8001c5c <HAL_I2C_Master_Transmit>
 80010da:	4603      	mov	r3, r0
 80010dc:	b25b      	sxtb	r3, r3
    		(uint8_t*)data, count, 100);
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	200000d8 	.word	0x200000d8

080010ec <sensirion_i2c_hal_sleep_usec>:
 *
 * Despite the unit, a <10 millisecond precision is sufficient.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	uint32_t msec = useconds / 1000;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a0d      	ldr	r2, [pc, #52]	; (800112c <sensirion_i2c_hal_sleep_usec+0x40>)
 80010f8:	fba2 2303 	umull	r2, r3, r2, r3
 80010fc:	099b      	lsrs	r3, r3, #6
 80010fe:	60fb      	str	r3, [r7, #12]
	if (useconds % 1000 > 0) {
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	4b0a      	ldr	r3, [pc, #40]	; (800112c <sensirion_i2c_hal_sleep_usec+0x40>)
 8001104:	fba3 1302 	umull	r1, r3, r3, r2
 8001108:	099b      	lsrs	r3, r3, #6
 800110a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800110e:	fb01 f303 	mul.w	r3, r1, r3
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	2b00      	cmp	r3, #0
 8001116:	d002      	beq.n	800111e <sensirion_i2c_hal_sleep_usec+0x32>
		msec++;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	3301      	adds	r3, #1
 800111c:	60fb      	str	r3, [r7, #12]
	}
}
 800111e:	bf00      	nop
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	10624dd3 	.word	0x10624dd3

08001130 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	4b10      	ldr	r3, [pc, #64]	; (800117c <HAL_MspInit+0x4c>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113e:	4a0f      	ldr	r2, [pc, #60]	; (800117c <HAL_MspInit+0x4c>)
 8001140:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001144:	6453      	str	r3, [r2, #68]	; 0x44
 8001146:	4b0d      	ldr	r3, [pc, #52]	; (800117c <HAL_MspInit+0x4c>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	603b      	str	r3, [r7, #0]
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <HAL_MspInit+0x4c>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	4a08      	ldr	r2, [pc, #32]	; (800117c <HAL_MspInit+0x4c>)
 800115c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001160:	6413      	str	r3, [r2, #64]	; 0x40
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <HAL_MspInit+0x4c>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116a:	603b      	str	r3, [r7, #0]
 800116c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800116e:	2007      	movs	r0, #7
 8001170:	f000 fa44 	bl	80015fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40023800 	.word	0x40023800

08001180 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	; 0x28
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a19      	ldr	r2, [pc, #100]	; (8001204 <HAL_I2C_MspInit+0x84>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d12c      	bne.n	80011fc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <HAL_I2C_MspInit+0x88>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a17      	ldr	r2, [pc, #92]	; (8001208 <HAL_I2C_MspInit+0x88>)
 80011ac:	f043 0302 	orr.w	r3, r3, #2
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b15      	ldr	r3, [pc, #84]	; (8001208 <HAL_I2C_MspInit+0x88>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011c4:	2312      	movs	r3, #18
 80011c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011cc:	2303      	movs	r3, #3
 80011ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011d0:	2304      	movs	r3, #4
 80011d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	4619      	mov	r1, r3
 80011da:	480c      	ldr	r0, [pc, #48]	; (800120c <HAL_I2C_MspInit+0x8c>)
 80011dc:	f000 fa42 	bl	8001664 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011e0:	2300      	movs	r3, #0
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <HAL_I2C_MspInit+0x88>)
 80011e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e8:	4a07      	ldr	r2, [pc, #28]	; (8001208 <HAL_I2C_MspInit+0x88>)
 80011ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011ee:	6413      	str	r3, [r2, #64]	; 0x40
 80011f0:	4b05      	ldr	r3, [pc, #20]	; (8001208 <HAL_I2C_MspInit+0x88>)
 80011f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011fc:	bf00      	nop
 80011fe:	3728      	adds	r7, #40	; 0x28
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40005400 	.word	0x40005400
 8001208:	40023800 	.word	0x40023800
 800120c:	40020400 	.word	0x40020400

08001210 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	; 0x28
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a19      	ldr	r2, [pc, #100]	; (8001294 <HAL_UART_MspInit+0x84>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d12b      	bne.n	800128a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	4b18      	ldr	r3, [pc, #96]	; (8001298 <HAL_UART_MspInit+0x88>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	4a17      	ldr	r2, [pc, #92]	; (8001298 <HAL_UART_MspInit+0x88>)
 800123c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001240:	6413      	str	r3, [r2, #64]	; 0x40
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <HAL_UART_MspInit+0x88>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <HAL_UART_MspInit+0x88>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a10      	ldr	r2, [pc, #64]	; (8001298 <HAL_UART_MspInit+0x88>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <HAL_UART_MspInit+0x88>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800126a:	230c      	movs	r3, #12
 800126c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126e:	2302      	movs	r3, #2
 8001270:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001276:	2300      	movs	r3, #0
 8001278:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800127a:	2307      	movs	r3, #7
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127e:	f107 0314 	add.w	r3, r7, #20
 8001282:	4619      	mov	r1, r3
 8001284:	4805      	ldr	r0, [pc, #20]	; (800129c <HAL_UART_MspInit+0x8c>)
 8001286:	f000 f9ed 	bl	8001664 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800128a:	bf00      	nop
 800128c:	3728      	adds	r7, #40	; 0x28
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40004400 	.word	0x40004400
 8001298:	40023800 	.word	0x40023800
 800129c:	40020000 	.word	0x40020000

080012a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <NMI_Handler+0x4>

080012a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012aa:	e7fe      	b.n	80012aa <HardFault_Handler+0x4>

080012ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <MemManage_Handler+0x4>

080012b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b6:	e7fe      	b.n	80012b6 <BusFault_Handler+0x4>

080012b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012bc:	e7fe      	b.n	80012bc <UsageFault_Handler+0x4>

080012be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ec:	f000 f890 	bl	8001410 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012f8:	4b06      	ldr	r3, [pc, #24]	; (8001314 <SystemInit+0x20>)
 80012fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012fe:	4a05      	ldr	r2, [pc, #20]	; (8001314 <SystemInit+0x20>)
 8001300:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001304:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001318:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001350 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800131c:	480d      	ldr	r0, [pc, #52]	; (8001354 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800131e:	490e      	ldr	r1, [pc, #56]	; (8001358 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001320:	4a0e      	ldr	r2, [pc, #56]	; (800135c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001322:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001324:	e002      	b.n	800132c <LoopCopyDataInit>

08001326 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001326:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001328:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800132a:	3304      	adds	r3, #4

0800132c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800132c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800132e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001330:	d3f9      	bcc.n	8001326 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001332:	4a0b      	ldr	r2, [pc, #44]	; (8001360 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001334:	4c0b      	ldr	r4, [pc, #44]	; (8001364 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001336:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001338:	e001      	b.n	800133e <LoopFillZerobss>

0800133a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800133a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800133c:	3204      	adds	r2, #4

0800133e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800133e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001340:	d3fb      	bcc.n	800133a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001342:	f7ff ffd7 	bl	80012f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001346:	f002 fb63 	bl	8003a10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800134a:	f7ff fabf 	bl	80008cc <main>
  bx  lr    
 800134e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001350:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001354:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001358:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800135c:	08003bb4 	.word	0x08003bb4
  ldr r2, =_sbss
 8001360:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001364:	20000130 	.word	0x20000130

08001368 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001368:	e7fe      	b.n	8001368 <ADC_IRQHandler>
	...

0800136c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001370:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <HAL_Init+0x40>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a0d      	ldr	r2, [pc, #52]	; (80013ac <HAL_Init+0x40>)
 8001376:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800137a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800137c:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <HAL_Init+0x40>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <HAL_Init+0x40>)
 8001382:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001386:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001388:	4b08      	ldr	r3, [pc, #32]	; (80013ac <HAL_Init+0x40>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a07      	ldr	r2, [pc, #28]	; (80013ac <HAL_Init+0x40>)
 800138e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001392:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001394:	2003      	movs	r0, #3
 8001396:	f000 f931 	bl	80015fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800139a:	2000      	movs	r0, #0
 800139c:	f000 f808 	bl	80013b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013a0:	f7ff fec6 	bl	8001130 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40023c00 	.word	0x40023c00

080013b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <HAL_InitTick+0x54>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	4b12      	ldr	r3, [pc, #72]	; (8001408 <HAL_InitTick+0x58>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	4619      	mov	r1, r3
 80013c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ce:	4618      	mov	r0, r3
 80013d0:	f000 f93b 	bl	800164a <HAL_SYSTICK_Config>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e00e      	b.n	80013fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b0f      	cmp	r3, #15
 80013e2:	d80a      	bhi.n	80013fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013e4:	2200      	movs	r2, #0
 80013e6:	6879      	ldr	r1, [r7, #4]
 80013e8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ec:	f000 f911 	bl	8001612 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013f0:	4a06      	ldr	r2, [pc, #24]	; (800140c <HAL_InitTick+0x5c>)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013f6:	2300      	movs	r3, #0
 80013f8:	e000      	b.n	80013fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000010 	.word	0x20000010
 8001408:	20000018 	.word	0x20000018
 800140c:	20000014 	.word	0x20000014

08001410 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <HAL_IncTick+0x20>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	461a      	mov	r2, r3
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <HAL_IncTick+0x24>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4413      	add	r3, r2
 8001420:	4a04      	ldr	r2, [pc, #16]	; (8001434 <HAL_IncTick+0x24>)
 8001422:	6013      	str	r3, [r2, #0]
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	20000018 	.word	0x20000018
 8001434:	2000012c 	.word	0x2000012c

08001438 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  return uwTick;
 800143c:	4b03      	ldr	r3, [pc, #12]	; (800144c <HAL_GetTick+0x14>)
 800143e:	681b      	ldr	r3, [r3, #0]
}
 8001440:	4618      	mov	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	2000012c 	.word	0x2000012c

08001450 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001458:	f7ff ffee 	bl	8001438 <HAL_GetTick>
 800145c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001468:	d005      	beq.n	8001476 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800146a:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <HAL_Delay+0x44>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	461a      	mov	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4413      	add	r3, r2
 8001474:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001476:	bf00      	nop
 8001478:	f7ff ffde 	bl	8001438 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	429a      	cmp	r2, r3
 8001486:	d8f7      	bhi.n	8001478 <HAL_Delay+0x28>
  {
  }
}
 8001488:	bf00      	nop
 800148a:	bf00      	nop
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000018 	.word	0x20000018

08001498 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a8:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <__NVIC_SetPriorityGrouping+0x44>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ae:	68ba      	ldr	r2, [r7, #8]
 80014b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014b4:	4013      	ands	r3, r2
 80014b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ca:	4a04      	ldr	r2, [pc, #16]	; (80014dc <__NVIC_SetPriorityGrouping+0x44>)
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	60d3      	str	r3, [r2, #12]
}
 80014d0:	bf00      	nop
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e4:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <__NVIC_GetPriorityGrouping+0x18>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	0a1b      	lsrs	r3, r3, #8
 80014ea:	f003 0307 	and.w	r3, r3, #7
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	6039      	str	r1, [r7, #0]
 8001506:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150c:	2b00      	cmp	r3, #0
 800150e:	db0a      	blt.n	8001526 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	b2da      	uxtb	r2, r3
 8001514:	490c      	ldr	r1, [pc, #48]	; (8001548 <__NVIC_SetPriority+0x4c>)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	0112      	lsls	r2, r2, #4
 800151c:	b2d2      	uxtb	r2, r2
 800151e:	440b      	add	r3, r1
 8001520:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001524:	e00a      	b.n	800153c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	b2da      	uxtb	r2, r3
 800152a:	4908      	ldr	r1, [pc, #32]	; (800154c <__NVIC_SetPriority+0x50>)
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	f003 030f 	and.w	r3, r3, #15
 8001532:	3b04      	subs	r3, #4
 8001534:	0112      	lsls	r2, r2, #4
 8001536:	b2d2      	uxtb	r2, r2
 8001538:	440b      	add	r3, r1
 800153a:	761a      	strb	r2, [r3, #24]
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	e000e100 	.word	0xe000e100
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001550:	b480      	push	{r7}
 8001552:	b089      	sub	sp, #36	; 0x24
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	f1c3 0307 	rsb	r3, r3, #7
 800156a:	2b04      	cmp	r3, #4
 800156c:	bf28      	it	cs
 800156e:	2304      	movcs	r3, #4
 8001570:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	3304      	adds	r3, #4
 8001576:	2b06      	cmp	r3, #6
 8001578:	d902      	bls.n	8001580 <NVIC_EncodePriority+0x30>
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3b03      	subs	r3, #3
 800157e:	e000      	b.n	8001582 <NVIC_EncodePriority+0x32>
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001584:	f04f 32ff 	mov.w	r2, #4294967295
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43da      	mvns	r2, r3
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	401a      	ands	r2, r3
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001598:	f04f 31ff 	mov.w	r1, #4294967295
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	fa01 f303 	lsl.w	r3, r1, r3
 80015a2:	43d9      	mvns	r1, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a8:	4313      	orrs	r3, r2
         );
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3724      	adds	r7, #36	; 0x24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
	...

080015b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015c8:	d301      	bcc.n	80015ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ca:	2301      	movs	r3, #1
 80015cc:	e00f      	b.n	80015ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ce:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <SysTick_Config+0x40>)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3b01      	subs	r3, #1
 80015d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015d6:	210f      	movs	r1, #15
 80015d8:	f04f 30ff 	mov.w	r0, #4294967295
 80015dc:	f7ff ff8e 	bl	80014fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015e0:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <SysTick_Config+0x40>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015e6:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <SysTick_Config+0x40>)
 80015e8:	2207      	movs	r2, #7
 80015ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	e000e010 	.word	0xe000e010

080015fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff ff47 	bl	8001498 <__NVIC_SetPriorityGrouping>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001612:	b580      	push	{r7, lr}
 8001614:	b086      	sub	sp, #24
 8001616:	af00      	add	r7, sp, #0
 8001618:	4603      	mov	r3, r0
 800161a:	60b9      	str	r1, [r7, #8]
 800161c:	607a      	str	r2, [r7, #4]
 800161e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001624:	f7ff ff5c 	bl	80014e0 <__NVIC_GetPriorityGrouping>
 8001628:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	68b9      	ldr	r1, [r7, #8]
 800162e:	6978      	ldr	r0, [r7, #20]
 8001630:	f7ff ff8e 	bl	8001550 <NVIC_EncodePriority>
 8001634:	4602      	mov	r2, r0
 8001636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800163a:	4611      	mov	r1, r2
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff ff5d 	bl	80014fc <__NVIC_SetPriority>
}
 8001642:	bf00      	nop
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7ff ffb0 	bl	80015b8 <SysTick_Config>
 8001658:	4603      	mov	r3, r0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
	...

08001664 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001664:	b480      	push	{r7}
 8001666:	b089      	sub	sp, #36	; 0x24
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001672:	2300      	movs	r3, #0
 8001674:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001676:	2300      	movs	r3, #0
 8001678:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
 800167e:	e159      	b.n	8001934 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001680:	2201      	movs	r2, #1
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	697a      	ldr	r2, [r7, #20]
 8001690:	4013      	ands	r3, r2
 8001692:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	429a      	cmp	r2, r3
 800169a:	f040 8148 	bne.w	800192e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f003 0303 	and.w	r3, r3, #3
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d005      	beq.n	80016b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d130      	bne.n	8001718 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	2203      	movs	r2, #3
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43db      	mvns	r3, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4013      	ands	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	68da      	ldr	r2, [r3, #12]
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4313      	orrs	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016ec:	2201      	movs	r2, #1
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4013      	ands	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	091b      	lsrs	r3, r3, #4
 8001702:	f003 0201 	and.w	r2, r3, #1
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4313      	orrs	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 0303 	and.w	r3, r3, #3
 8001720:	2b03      	cmp	r3, #3
 8001722:	d017      	beq.n	8001754 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	2203      	movs	r2, #3
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	43db      	mvns	r3, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4013      	ands	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4313      	orrs	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 0303 	and.w	r3, r3, #3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d123      	bne.n	80017a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	08da      	lsrs	r2, r3, #3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3208      	adds	r2, #8
 8001768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800176c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	f003 0307 	and.w	r3, r3, #7
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	220f      	movs	r2, #15
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4013      	ands	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	691a      	ldr	r2, [r3, #16]
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4313      	orrs	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	08da      	lsrs	r2, r3, #3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	3208      	adds	r2, #8
 80017a2:	69b9      	ldr	r1, [r7, #24]
 80017a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	2203      	movs	r2, #3
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4013      	ands	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 0203 	and.w	r2, r3, #3
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f000 80a2 	beq.w	800192e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	4b57      	ldr	r3, [pc, #348]	; (800194c <HAL_GPIO_Init+0x2e8>)
 80017f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f2:	4a56      	ldr	r2, [pc, #344]	; (800194c <HAL_GPIO_Init+0x2e8>)
 80017f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f8:	6453      	str	r3, [r2, #68]	; 0x44
 80017fa:	4b54      	ldr	r3, [pc, #336]	; (800194c <HAL_GPIO_Init+0x2e8>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001806:	4a52      	ldr	r2, [pc, #328]	; (8001950 <HAL_GPIO_Init+0x2ec>)
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	089b      	lsrs	r3, r3, #2
 800180c:	3302      	adds	r3, #2
 800180e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001812:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	f003 0303 	and.w	r3, r3, #3
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	220f      	movs	r2, #15
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43db      	mvns	r3, r3
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	4013      	ands	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a49      	ldr	r2, [pc, #292]	; (8001954 <HAL_GPIO_Init+0x2f0>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d019      	beq.n	8001866 <HAL_GPIO_Init+0x202>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a48      	ldr	r2, [pc, #288]	; (8001958 <HAL_GPIO_Init+0x2f4>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d013      	beq.n	8001862 <HAL_GPIO_Init+0x1fe>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a47      	ldr	r2, [pc, #284]	; (800195c <HAL_GPIO_Init+0x2f8>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d00d      	beq.n	800185e <HAL_GPIO_Init+0x1fa>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a46      	ldr	r2, [pc, #280]	; (8001960 <HAL_GPIO_Init+0x2fc>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d007      	beq.n	800185a <HAL_GPIO_Init+0x1f6>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a45      	ldr	r2, [pc, #276]	; (8001964 <HAL_GPIO_Init+0x300>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d101      	bne.n	8001856 <HAL_GPIO_Init+0x1f2>
 8001852:	2304      	movs	r3, #4
 8001854:	e008      	b.n	8001868 <HAL_GPIO_Init+0x204>
 8001856:	2307      	movs	r3, #7
 8001858:	e006      	b.n	8001868 <HAL_GPIO_Init+0x204>
 800185a:	2303      	movs	r3, #3
 800185c:	e004      	b.n	8001868 <HAL_GPIO_Init+0x204>
 800185e:	2302      	movs	r3, #2
 8001860:	e002      	b.n	8001868 <HAL_GPIO_Init+0x204>
 8001862:	2301      	movs	r3, #1
 8001864:	e000      	b.n	8001868 <HAL_GPIO_Init+0x204>
 8001866:	2300      	movs	r3, #0
 8001868:	69fa      	ldr	r2, [r7, #28]
 800186a:	f002 0203 	and.w	r2, r2, #3
 800186e:	0092      	lsls	r2, r2, #2
 8001870:	4093      	lsls	r3, r2
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001878:	4935      	ldr	r1, [pc, #212]	; (8001950 <HAL_GPIO_Init+0x2ec>)
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	089b      	lsrs	r3, r3, #2
 800187e:	3302      	adds	r3, #2
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001886:	4b38      	ldr	r3, [pc, #224]	; (8001968 <HAL_GPIO_Init+0x304>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	43db      	mvns	r3, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4013      	ands	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018aa:	4a2f      	ldr	r2, [pc, #188]	; (8001968 <HAL_GPIO_Init+0x304>)
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018b0:	4b2d      	ldr	r3, [pc, #180]	; (8001968 <HAL_GPIO_Init+0x304>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	43db      	mvns	r3, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4013      	ands	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d003      	beq.n	80018d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018d4:	4a24      	ldr	r2, [pc, #144]	; (8001968 <HAL_GPIO_Init+0x304>)
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018da:	4b23      	ldr	r3, [pc, #140]	; (8001968 <HAL_GPIO_Init+0x304>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	43db      	mvns	r3, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4013      	ands	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018fe:	4a1a      	ldr	r2, [pc, #104]	; (8001968 <HAL_GPIO_Init+0x304>)
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001904:	4b18      	ldr	r3, [pc, #96]	; (8001968 <HAL_GPIO_Init+0x304>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	43db      	mvns	r3, r3
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4013      	ands	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d003      	beq.n	8001928 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	4313      	orrs	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001928:	4a0f      	ldr	r2, [pc, #60]	; (8001968 <HAL_GPIO_Init+0x304>)
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3301      	adds	r3, #1
 8001932:	61fb      	str	r3, [r7, #28]
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	2b0f      	cmp	r3, #15
 8001938:	f67f aea2 	bls.w	8001680 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800193c:	bf00      	nop
 800193e:	bf00      	nop
 8001940:	3724      	adds	r7, #36	; 0x24
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	40023800 	.word	0x40023800
 8001950:	40013800 	.word	0x40013800
 8001954:	40020000 	.word	0x40020000
 8001958:	40020400 	.word	0x40020400
 800195c:	40020800 	.word	0x40020800
 8001960:	40020c00 	.word	0x40020c00
 8001964:	40021000 	.word	0x40021000
 8001968:	40013c00 	.word	0x40013c00

0800196c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	460b      	mov	r3, r1
 8001976:	807b      	strh	r3, [r7, #2]
 8001978:	4613      	mov	r3, r2
 800197a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800197c:	787b      	ldrb	r3, [r7, #1]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001982:	887a      	ldrh	r2, [r7, #2]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001988:	e003      	b.n	8001992 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800198a:	887b      	ldrh	r3, [r7, #2]
 800198c:	041a      	lsls	r2, r3, #16
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	619a      	str	r2, [r3, #24]
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800199e:	b480      	push	{r7}
 80019a0:	b085      	sub	sp, #20
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
 80019a6:	460b      	mov	r3, r1
 80019a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019b0:	887a      	ldrh	r2, [r7, #2]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	4013      	ands	r3, r2
 80019b6:	041a      	lsls	r2, r3, #16
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	43d9      	mvns	r1, r3
 80019bc:	887b      	ldrh	r3, [r7, #2]
 80019be:	400b      	ands	r3, r1
 80019c0:	431a      	orrs	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	619a      	str	r2, [r3, #24]
}
 80019c6:	bf00      	nop
 80019c8:	3714      	adds	r7, #20
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
	...

080019d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e12b      	b.n	8001c3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d106      	bne.n	8001a00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff fbc0 	bl	8001180 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2224      	movs	r2, #36	; 0x24
 8001a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f022 0201 	bic.w	r2, r2, #1
 8001a16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a38:	f001 fd00 	bl	800343c <HAL_RCC_GetPCLK1Freq>
 8001a3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	4a81      	ldr	r2, [pc, #516]	; (8001c48 <HAL_I2C_Init+0x274>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d807      	bhi.n	8001a58 <HAL_I2C_Init+0x84>
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4a80      	ldr	r2, [pc, #512]	; (8001c4c <HAL_I2C_Init+0x278>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	bf94      	ite	ls
 8001a50:	2301      	movls	r3, #1
 8001a52:	2300      	movhi	r3, #0
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	e006      	b.n	8001a66 <HAL_I2C_Init+0x92>
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4a7d      	ldr	r2, [pc, #500]	; (8001c50 <HAL_I2C_Init+0x27c>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	bf94      	ite	ls
 8001a60:	2301      	movls	r3, #1
 8001a62:	2300      	movhi	r3, #0
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e0e7      	b.n	8001c3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	4a78      	ldr	r2, [pc, #480]	; (8001c54 <HAL_I2C_Init+0x280>)
 8001a72:	fba2 2303 	umull	r2, r3, r2, r3
 8001a76:	0c9b      	lsrs	r3, r3, #18
 8001a78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68ba      	ldr	r2, [r7, #8]
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	4a6a      	ldr	r2, [pc, #424]	; (8001c48 <HAL_I2C_Init+0x274>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d802      	bhi.n	8001aa8 <HAL_I2C_Init+0xd4>
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	e009      	b.n	8001abc <HAL_I2C_Init+0xe8>
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001aae:	fb02 f303 	mul.w	r3, r2, r3
 8001ab2:	4a69      	ldr	r2, [pc, #420]	; (8001c58 <HAL_I2C_Init+0x284>)
 8001ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab8:	099b      	lsrs	r3, r3, #6
 8001aba:	3301      	adds	r3, #1
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6812      	ldr	r2, [r2, #0]
 8001ac0:	430b      	orrs	r3, r1
 8001ac2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ace:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	495c      	ldr	r1, [pc, #368]	; (8001c48 <HAL_I2C_Init+0x274>)
 8001ad8:	428b      	cmp	r3, r1
 8001ada:	d819      	bhi.n	8001b10 <HAL_I2C_Init+0x13c>
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	1e59      	subs	r1, r3, #1
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001aea:	1c59      	adds	r1, r3, #1
 8001aec:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001af0:	400b      	ands	r3, r1
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d00a      	beq.n	8001b0c <HAL_I2C_Init+0x138>
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	1e59      	subs	r1, r3, #1
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b04:	3301      	adds	r3, #1
 8001b06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b0a:	e051      	b.n	8001bb0 <HAL_I2C_Init+0x1dc>
 8001b0c:	2304      	movs	r3, #4
 8001b0e:	e04f      	b.n	8001bb0 <HAL_I2C_Init+0x1dc>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d111      	bne.n	8001b3c <HAL_I2C_Init+0x168>
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	1e58      	subs	r0, r3, #1
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6859      	ldr	r1, [r3, #4]
 8001b20:	460b      	mov	r3, r1
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	440b      	add	r3, r1
 8001b26:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	bf0c      	ite	eq
 8001b34:	2301      	moveq	r3, #1
 8001b36:	2300      	movne	r3, #0
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	e012      	b.n	8001b62 <HAL_I2C_Init+0x18e>
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	1e58      	subs	r0, r3, #1
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6859      	ldr	r1, [r3, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	440b      	add	r3, r1
 8001b4a:	0099      	lsls	r1, r3, #2
 8001b4c:	440b      	add	r3, r1
 8001b4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b52:	3301      	adds	r3, #1
 8001b54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	bf0c      	ite	eq
 8001b5c:	2301      	moveq	r3, #1
 8001b5e:	2300      	movne	r3, #0
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <HAL_I2C_Init+0x196>
 8001b66:	2301      	movs	r3, #1
 8001b68:	e022      	b.n	8001bb0 <HAL_I2C_Init+0x1dc>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10e      	bne.n	8001b90 <HAL_I2C_Init+0x1bc>
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	1e58      	subs	r0, r3, #1
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6859      	ldr	r1, [r3, #4]
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	440b      	add	r3, r1
 8001b80:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b84:	3301      	adds	r3, #1
 8001b86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b8e:	e00f      	b.n	8001bb0 <HAL_I2C_Init+0x1dc>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	1e58      	subs	r0, r3, #1
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6859      	ldr	r1, [r3, #4]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	440b      	add	r3, r1
 8001b9e:	0099      	lsls	r1, r3, #2
 8001ba0:	440b      	add	r3, r1
 8001ba2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bb0:	6879      	ldr	r1, [r7, #4]
 8001bb2:	6809      	ldr	r1, [r1, #0]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	69da      	ldr	r2, [r3, #28]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a1b      	ldr	r3, [r3, #32]
 8001bca:	431a      	orrs	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001bde:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	6911      	ldr	r1, [r2, #16]
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	68d2      	ldr	r2, [r2, #12]
 8001bea:	4311      	orrs	r1, r2
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6812      	ldr	r2, [r2, #0]
 8001bf0:	430b      	orrs	r3, r1
 8001bf2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	695a      	ldr	r2, [r3, #20]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f042 0201 	orr.w	r2, r2, #1
 8001c1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2220      	movs	r2, #32
 8001c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	000186a0 	.word	0x000186a0
 8001c4c:	001e847f 	.word	0x001e847f
 8001c50:	003d08ff 	.word	0x003d08ff
 8001c54:	431bde83 	.word	0x431bde83
 8001c58:	10624dd3 	.word	0x10624dd3

08001c5c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b088      	sub	sp, #32
 8001c60:	af02      	add	r7, sp, #8
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	607a      	str	r2, [r7, #4]
 8001c66:	461a      	mov	r2, r3
 8001c68:	460b      	mov	r3, r1
 8001c6a:	817b      	strh	r3, [r7, #10]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c70:	f7ff fbe2 	bl	8001438 <HAL_GetTick>
 8001c74:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b20      	cmp	r3, #32
 8001c80:	f040 80e0 	bne.w	8001e44 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	2319      	movs	r3, #25
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	4970      	ldr	r1, [pc, #448]	; (8001e50 <HAL_I2C_Master_Transmit+0x1f4>)
 8001c8e:	68f8      	ldr	r0, [r7, #12]
 8001c90:	f000 fd86 	bl	80027a0 <I2C_WaitOnFlagUntilTimeout>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	e0d3      	b.n	8001e46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d101      	bne.n	8001cac <HAL_I2C_Master_Transmit+0x50>
 8001ca8:	2302      	movs	r3, #2
 8001caa:	e0cc      	b.n	8001e46 <HAL_I2C_Master_Transmit+0x1ea>
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d007      	beq.n	8001cd2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f042 0201 	orr.w	r2, r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ce0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2221      	movs	r2, #33	; 0x21
 8001ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2210      	movs	r2, #16
 8001cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	893a      	ldrh	r2, [r7, #8]
 8001d02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	4a50      	ldr	r2, [pc, #320]	; (8001e54 <HAL_I2C_Master_Transmit+0x1f8>)
 8001d12:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001d14:	8979      	ldrh	r1, [r7, #10]
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	6a3a      	ldr	r2, [r7, #32]
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f000 fbf0 	bl	8002500 <I2C_MasterRequestWrite>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e08d      	b.n	8001e46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	613b      	str	r3, [r7, #16]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	695b      	ldr	r3, [r3, #20]
 8001d34:	613b      	str	r3, [r7, #16]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	613b      	str	r3, [r7, #16]
 8001d3e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001d40:	e066      	b.n	8001e10 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	6a39      	ldr	r1, [r7, #32]
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f000 fe00 	bl	800294c <I2C_WaitOnTXEFlagUntilTimeout>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00d      	beq.n	8001d6e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	d107      	bne.n	8001d6a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d68:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e06b      	b.n	8001e46 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d72:	781a      	ldrb	r2, [r3, #0]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7e:	1c5a      	adds	r2, r3, #1
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d96:	3b01      	subs	r3, #1
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	695b      	ldr	r3, [r3, #20]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	2b04      	cmp	r3, #4
 8001daa:	d11b      	bne.n	8001de4 <HAL_I2C_Master_Transmit+0x188>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d017      	beq.n	8001de4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db8:	781a      	ldrb	r2, [r3, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc4:	1c5a      	adds	r2, r3, #1
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	6a39      	ldr	r1, [r7, #32]
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	f000 fdf0 	bl	80029ce <I2C_WaitOnBTFFlagUntilTimeout>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00d      	beq.n	8001e10 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df8:	2b04      	cmp	r3, #4
 8001dfa:	d107      	bne.n	8001e0c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e0a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e01a      	b.n	8001e46 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d194      	bne.n	8001d42 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2220      	movs	r2, #32
 8001e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e40:	2300      	movs	r3, #0
 8001e42:	e000      	b.n	8001e46 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001e44:	2302      	movs	r3, #2
  }
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3718      	adds	r7, #24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	00100002 	.word	0x00100002
 8001e54:	ffff0000 	.word	0xffff0000

08001e58 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b08c      	sub	sp, #48	; 0x30
 8001e5c:	af02      	add	r7, sp, #8
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	607a      	str	r2, [r7, #4]
 8001e62:	461a      	mov	r2, r3
 8001e64:	460b      	mov	r3, r1
 8001e66:	817b      	strh	r3, [r7, #10]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e6c:	f7ff fae4 	bl	8001438 <HAL_GetTick>
 8001e70:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b20      	cmp	r3, #32
 8001e7c:	f040 820b 	bne.w	8002296 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	2319      	movs	r3, #25
 8001e86:	2201      	movs	r2, #1
 8001e88:	497c      	ldr	r1, [pc, #496]	; (800207c <HAL_I2C_Master_Receive+0x224>)
 8001e8a:	68f8      	ldr	r0, [r7, #12]
 8001e8c:	f000 fc88 	bl	80027a0 <I2C_WaitOnFlagUntilTimeout>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001e96:	2302      	movs	r3, #2
 8001e98:	e1fe      	b.n	8002298 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d101      	bne.n	8001ea8 <HAL_I2C_Master_Receive+0x50>
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	e1f7      	b.n	8002298 <HAL_I2C_Master_Receive+0x440>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d007      	beq.n	8001ece <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f042 0201 	orr.w	r2, r2, #1
 8001ecc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001edc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2222      	movs	r2, #34	; 0x22
 8001ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2210      	movs	r2, #16
 8001eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	893a      	ldrh	r2, [r7, #8]
 8001efe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	4a5c      	ldr	r2, [pc, #368]	; (8002080 <HAL_I2C_Master_Receive+0x228>)
 8001f0e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f10:	8979      	ldrh	r1, [r7, #10]
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f000 fb74 	bl	8002604 <I2C_MasterRequestRead>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e1b8      	b.n	8002298 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d113      	bne.n	8001f56 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f2e:	2300      	movs	r3, #0
 8001f30:	623b      	str	r3, [r7, #32]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	695b      	ldr	r3, [r3, #20]
 8001f38:	623b      	str	r3, [r7, #32]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	623b      	str	r3, [r7, #32]
 8001f42:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	e18c      	b.n	8002270 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d11b      	bne.n	8001f96 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61fb      	str	r3, [r7, #28]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	695b      	ldr	r3, [r3, #20]
 8001f78:	61fb      	str	r3, [r7, #28]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	61fb      	str	r3, [r7, #28]
 8001f82:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	e16c      	b.n	8002270 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d11b      	bne.n	8001fd6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61bb      	str	r3, [r7, #24]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	695b      	ldr	r3, [r3, #20]
 8001fc8:	61bb      	str	r3, [r7, #24]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	61bb      	str	r3, [r7, #24]
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	e14c      	b.n	8002270 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001fe4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	617b      	str	r3, [r7, #20]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	617b      	str	r3, [r7, #20]
 8001ffa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001ffc:	e138      	b.n	8002270 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002002:	2b03      	cmp	r3, #3
 8002004:	f200 80f1 	bhi.w	80021ea <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800200c:	2b01      	cmp	r3, #1
 800200e:	d123      	bne.n	8002058 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002012:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002014:	68f8      	ldr	r0, [r7, #12]
 8002016:	f000 fd1b 	bl	8002a50 <I2C_WaitOnRXNEFlagUntilTimeout>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e139      	b.n	8002298 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	691a      	ldr	r2, [r3, #16]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002036:	1c5a      	adds	r2, r3, #1
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002040:	3b01      	subs	r3, #1
 8002042:	b29a      	uxth	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800204c:	b29b      	uxth	r3, r3
 800204e:	3b01      	subs	r3, #1
 8002050:	b29a      	uxth	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002056:	e10b      	b.n	8002270 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800205c:	2b02      	cmp	r3, #2
 800205e:	d14e      	bne.n	80020fe <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002066:	2200      	movs	r2, #0
 8002068:	4906      	ldr	r1, [pc, #24]	; (8002084 <HAL_I2C_Master_Receive+0x22c>)
 800206a:	68f8      	ldr	r0, [r7, #12]
 800206c:	f000 fb98 	bl	80027a0 <I2C_WaitOnFlagUntilTimeout>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d008      	beq.n	8002088 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e10e      	b.n	8002298 <HAL_I2C_Master_Receive+0x440>
 800207a:	bf00      	nop
 800207c:	00100002 	.word	0x00100002
 8002080:	ffff0000 	.word	0xffff0000
 8002084:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002096:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	691a      	ldr	r2, [r3, #16]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020aa:	1c5a      	adds	r2, r3, #1
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b4:	3b01      	subs	r3, #1
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	3b01      	subs	r3, #1
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	691a      	ldr	r2, [r3, #16]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	1c5a      	adds	r2, r3, #1
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e6:	3b01      	subs	r3, #1
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	3b01      	subs	r3, #1
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020fc:	e0b8      	b.n	8002270 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	9300      	str	r3, [sp, #0]
 8002102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002104:	2200      	movs	r2, #0
 8002106:	4966      	ldr	r1, [pc, #408]	; (80022a0 <HAL_I2C_Master_Receive+0x448>)
 8002108:	68f8      	ldr	r0, [r7, #12]
 800210a:	f000 fb49 	bl	80027a0 <I2C_WaitOnFlagUntilTimeout>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e0bf      	b.n	8002298 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002126:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	691a      	ldr	r2, [r3, #16]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213a:	1c5a      	adds	r2, r3, #1
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002144:	3b01      	subs	r3, #1
 8002146:	b29a      	uxth	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002150:	b29b      	uxth	r3, r3
 8002152:	3b01      	subs	r3, #1
 8002154:	b29a      	uxth	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002160:	2200      	movs	r2, #0
 8002162:	494f      	ldr	r1, [pc, #316]	; (80022a0 <HAL_I2C_Master_Receive+0x448>)
 8002164:	68f8      	ldr	r0, [r7, #12]
 8002166:	f000 fb1b 	bl	80027a0 <I2C_WaitOnFlagUntilTimeout>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e091      	b.n	8002298 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002182:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	691a      	ldr	r2, [r3, #16]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	b2d2      	uxtb	r2, r2
 8002190:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002196:	1c5a      	adds	r2, r3, #1
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a0:	3b01      	subs	r3, #1
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	3b01      	subs	r3, #1
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	691a      	ldr	r2, [r3, #16]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c8:	1c5a      	adds	r2, r3, #1
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d2:	3b01      	subs	r3, #1
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021de:	b29b      	uxth	r3, r3
 80021e0:	3b01      	subs	r3, #1
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80021e8:	e042      	b.n	8002270 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f000 fc2e 	bl	8002a50 <I2C_WaitOnRXNEFlagUntilTimeout>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e04c      	b.n	8002298 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	691a      	ldr	r2, [r3, #16]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002210:	1c5a      	adds	r2, r3, #1
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800221a:	3b01      	subs	r3, #1
 800221c:	b29a      	uxth	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002226:	b29b      	uxth	r3, r3
 8002228:	3b01      	subs	r3, #1
 800222a:	b29a      	uxth	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	f003 0304 	and.w	r3, r3, #4
 800223a:	2b04      	cmp	r3, #4
 800223c:	d118      	bne.n	8002270 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	691a      	ldr	r2, [r3, #16]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	1c5a      	adds	r2, r3, #1
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800225a:	3b01      	subs	r3, #1
 800225c:	b29a      	uxth	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002266:	b29b      	uxth	r3, r3
 8002268:	3b01      	subs	r3, #1
 800226a:	b29a      	uxth	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002274:	2b00      	cmp	r3, #0
 8002276:	f47f aec2 	bne.w	8001ffe <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2220      	movs	r2, #32
 800227e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002292:	2300      	movs	r3, #0
 8002294:	e000      	b.n	8002298 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002296:	2302      	movs	r3, #2
  }
}
 8002298:	4618      	mov	r0, r3
 800229a:	3728      	adds	r7, #40	; 0x28
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	00010004 	.word	0x00010004

080022a4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08a      	sub	sp, #40	; 0x28
 80022a8:	af02      	add	r7, sp, #8
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	607a      	str	r2, [r7, #4]
 80022ae:	603b      	str	r3, [r7, #0]
 80022b0:	460b      	mov	r3, r1
 80022b2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80022b4:	f7ff f8c0 	bl	8001438 <HAL_GetTick>
 80022b8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80022ba:	2300      	movs	r3, #0
 80022bc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b20      	cmp	r3, #32
 80022c8:	f040 8111 	bne.w	80024ee <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	9300      	str	r3, [sp, #0]
 80022d0:	2319      	movs	r3, #25
 80022d2:	2201      	movs	r2, #1
 80022d4:	4988      	ldr	r1, [pc, #544]	; (80024f8 <HAL_I2C_IsDeviceReady+0x254>)
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f000 fa62 	bl	80027a0 <I2C_WaitOnFlagUntilTimeout>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80022e2:	2302      	movs	r3, #2
 80022e4:	e104      	b.n	80024f0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d101      	bne.n	80022f4 <HAL_I2C_IsDeviceReady+0x50>
 80022f0:	2302      	movs	r3, #2
 80022f2:	e0fd      	b.n	80024f0 <HAL_I2C_IsDeviceReady+0x24c>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b01      	cmp	r3, #1
 8002308:	d007      	beq.n	800231a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f042 0201 	orr.w	r2, r2, #1
 8002318:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002328:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2224      	movs	r2, #36	; 0x24
 800232e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4a70      	ldr	r2, [pc, #448]	; (80024fc <HAL_I2C_IsDeviceReady+0x258>)
 800233c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800234c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	2200      	movs	r2, #0
 8002356:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	f000 fa20 	bl	80027a0 <I2C_WaitOnFlagUntilTimeout>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00d      	beq.n	8002382 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002370:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002374:	d103      	bne.n	800237e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f44f 7200 	mov.w	r2, #512	; 0x200
 800237c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e0b6      	b.n	80024f0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002382:	897b      	ldrh	r3, [r7, #10]
 8002384:	b2db      	uxtb	r3, r3
 8002386:	461a      	mov	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002390:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002392:	f7ff f851 	bl	8001438 <HAL_GetTick>
 8002396:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	bf0c      	ite	eq
 80023a6:	2301      	moveq	r3, #1
 80023a8:	2300      	movne	r3, #0
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	695b      	ldr	r3, [r3, #20]
 80023b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023bc:	bf0c      	ite	eq
 80023be:	2301      	moveq	r3, #1
 80023c0:	2300      	movne	r3, #0
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80023c6:	e025      	b.n	8002414 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80023c8:	f7ff f836 	bl	8001438 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d302      	bcc.n	80023de <HAL_I2C_IsDeviceReady+0x13a>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d103      	bne.n	80023e6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	22a0      	movs	r2, #160	; 0xa0
 80023e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	bf0c      	ite	eq
 80023f4:	2301      	moveq	r3, #1
 80023f6:	2300      	movne	r3, #0
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800240a:	bf0c      	ite	eq
 800240c:	2301      	moveq	r3, #1
 800240e:	2300      	movne	r3, #0
 8002410:	b2db      	uxtb	r3, r3
 8002412:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800241a:	b2db      	uxtb	r3, r3
 800241c:	2ba0      	cmp	r3, #160	; 0xa0
 800241e:	d005      	beq.n	800242c <HAL_I2C_IsDeviceReady+0x188>
 8002420:	7dfb      	ldrb	r3, [r7, #23]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d102      	bne.n	800242c <HAL_I2C_IsDeviceReady+0x188>
 8002426:	7dbb      	ldrb	r3, [r7, #22]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0cd      	beq.n	80023c8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2220      	movs	r2, #32
 8002430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b02      	cmp	r3, #2
 8002440:	d129      	bne.n	8002496 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002450:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002452:	2300      	movs	r3, #0
 8002454:	613b      	str	r3, [r7, #16]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	613b      	str	r3, [r7, #16]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	613b      	str	r3, [r7, #16]
 8002466:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	2319      	movs	r3, #25
 800246e:	2201      	movs	r2, #1
 8002470:	4921      	ldr	r1, [pc, #132]	; (80024f8 <HAL_I2C_IsDeviceReady+0x254>)
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f000 f994 	bl	80027a0 <I2C_WaitOnFlagUntilTimeout>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e036      	b.n	80024f0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2220      	movs	r2, #32
 8002486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002492:	2300      	movs	r3, #0
 8002494:	e02c      	b.n	80024f0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024a4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024ae:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	2319      	movs	r3, #25
 80024b6:	2201      	movs	r2, #1
 80024b8:	490f      	ldr	r1, [pc, #60]	; (80024f8 <HAL_I2C_IsDeviceReady+0x254>)
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f000 f970 	bl	80027a0 <I2C_WaitOnFlagUntilTimeout>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e012      	b.n	80024f0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	3301      	adds	r3, #1
 80024ce:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	f4ff af32 	bcc.w	800233e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2220      	movs	r2, #32
 80024de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e000      	b.n	80024f0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80024ee:	2302      	movs	r3, #2
  }
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3720      	adds	r7, #32
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	00100002 	.word	0x00100002
 80024fc:	ffff0000 	.word	0xffff0000

08002500 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b088      	sub	sp, #32
 8002504:	af02      	add	r7, sp, #8
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	607a      	str	r2, [r7, #4]
 800250a:	603b      	str	r3, [r7, #0]
 800250c:	460b      	mov	r3, r1
 800250e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002514:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	2b08      	cmp	r3, #8
 800251a:	d006      	beq.n	800252a <I2C_MasterRequestWrite+0x2a>
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d003      	beq.n	800252a <I2C_MasterRequestWrite+0x2a>
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002528:	d108      	bne.n	800253c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	e00b      	b.n	8002554 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002540:	2b12      	cmp	r3, #18
 8002542:	d107      	bne.n	8002554 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002552:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	9300      	str	r3, [sp, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f000 f91d 	bl	80027a0 <I2C_WaitOnFlagUntilTimeout>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00d      	beq.n	8002588 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800257a:	d103      	bne.n	8002584 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002582:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e035      	b.n	80025f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002590:	d108      	bne.n	80025a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002592:	897b      	ldrh	r3, [r7, #10]
 8002594:	b2db      	uxtb	r3, r3
 8002596:	461a      	mov	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80025a0:	611a      	str	r2, [r3, #16]
 80025a2:	e01b      	b.n	80025dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80025a4:	897b      	ldrh	r3, [r7, #10]
 80025a6:	11db      	asrs	r3, r3, #7
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	f003 0306 	and.w	r3, r3, #6
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	f063 030f 	orn	r3, r3, #15
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	490e      	ldr	r1, [pc, #56]	; (80025fc <I2C_MasterRequestWrite+0xfc>)
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f000 f943 	bl	800284e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e010      	b.n	80025f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80025d2:	897b      	ldrh	r3, [r7, #10]
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	4907      	ldr	r1, [pc, #28]	; (8002600 <I2C_MasterRequestWrite+0x100>)
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f000 f933 	bl	800284e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e000      	b.n	80025f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3718      	adds	r7, #24
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	00010008 	.word	0x00010008
 8002600:	00010002 	.word	0x00010002

08002604 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b088      	sub	sp, #32
 8002608:	af02      	add	r7, sp, #8
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	607a      	str	r2, [r7, #4]
 800260e:	603b      	str	r3, [r7, #0]
 8002610:	460b      	mov	r3, r1
 8002612:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002618:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002628:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	2b08      	cmp	r3, #8
 800262e:	d006      	beq.n	800263e <I2C_MasterRequestRead+0x3a>
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d003      	beq.n	800263e <I2C_MasterRequestRead+0x3a>
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800263c:	d108      	bne.n	8002650 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	e00b      	b.n	8002668 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002654:	2b11      	cmp	r3, #17
 8002656:	d107      	bne.n	8002668 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002666:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f000 f893 	bl	80027a0 <I2C_WaitOnFlagUntilTimeout>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00d      	beq.n	800269c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800268e:	d103      	bne.n	8002698 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002696:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e079      	b.n	8002790 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026a4:	d108      	bne.n	80026b8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80026a6:	897b      	ldrh	r3, [r7, #10]
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	f043 0301 	orr.w	r3, r3, #1
 80026ae:	b2da      	uxtb	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	611a      	str	r2, [r3, #16]
 80026b6:	e05f      	b.n	8002778 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80026b8:	897b      	ldrh	r3, [r7, #10]
 80026ba:	11db      	asrs	r3, r3, #7
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	f003 0306 	and.w	r3, r3, #6
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	f063 030f 	orn	r3, r3, #15
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	4930      	ldr	r1, [pc, #192]	; (8002798 <I2C_MasterRequestRead+0x194>)
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f000 f8b9 	bl	800284e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e054      	b.n	8002790 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80026e6:	897b      	ldrh	r3, [r7, #10]
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	4929      	ldr	r1, [pc, #164]	; (800279c <I2C_MasterRequestRead+0x198>)
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 f8a9 	bl	800284e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e044      	b.n	8002790 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002706:	2300      	movs	r3, #0
 8002708:	613b      	str	r3, [r7, #16]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	613b      	str	r3, [r7, #16]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	613b      	str	r3, [r7, #16]
 800271a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800272a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	9300      	str	r3, [sp, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f000 f831 	bl	80027a0 <I2C_WaitOnFlagUntilTimeout>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00d      	beq.n	8002760 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002752:	d103      	bne.n	800275c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800275a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e017      	b.n	8002790 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002760:	897b      	ldrh	r3, [r7, #10]
 8002762:	11db      	asrs	r3, r3, #7
 8002764:	b2db      	uxtb	r3, r3
 8002766:	f003 0306 	and.w	r3, r3, #6
 800276a:	b2db      	uxtb	r3, r3
 800276c:	f063 030e 	orn	r3, r3, #14
 8002770:	b2da      	uxtb	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	4907      	ldr	r1, [pc, #28]	; (800279c <I2C_MasterRequestRead+0x198>)
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f000 f865 	bl	800284e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e000      	b.n	8002790 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3718      	adds	r7, #24
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	00010008 	.word	0x00010008
 800279c:	00010002 	.word	0x00010002

080027a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	603b      	str	r3, [r7, #0]
 80027ac:	4613      	mov	r3, r2
 80027ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027b0:	e025      	b.n	80027fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b8:	d021      	beq.n	80027fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ba:	f7fe fe3d 	bl	8001438 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d302      	bcc.n	80027d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d116      	bne.n	80027fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2200      	movs	r2, #0
 80027d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2220      	movs	r2, #32
 80027da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	f043 0220 	orr.w	r2, r3, #32
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e023      	b.n	8002846 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	0c1b      	lsrs	r3, r3, #16
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b01      	cmp	r3, #1
 8002806:	d10d      	bne.n	8002824 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	43da      	mvns	r2, r3
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	4013      	ands	r3, r2
 8002814:	b29b      	uxth	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	bf0c      	ite	eq
 800281a:	2301      	moveq	r3, #1
 800281c:	2300      	movne	r3, #0
 800281e:	b2db      	uxtb	r3, r3
 8002820:	461a      	mov	r2, r3
 8002822:	e00c      	b.n	800283e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	43da      	mvns	r2, r3
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	4013      	ands	r3, r2
 8002830:	b29b      	uxth	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	bf0c      	ite	eq
 8002836:	2301      	moveq	r3, #1
 8002838:	2300      	movne	r3, #0
 800283a:	b2db      	uxtb	r3, r3
 800283c:	461a      	mov	r2, r3
 800283e:	79fb      	ldrb	r3, [r7, #7]
 8002840:	429a      	cmp	r2, r3
 8002842:	d0b6      	beq.n	80027b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b084      	sub	sp, #16
 8002852:	af00      	add	r7, sp, #0
 8002854:	60f8      	str	r0, [r7, #12]
 8002856:	60b9      	str	r1, [r7, #8]
 8002858:	607a      	str	r2, [r7, #4]
 800285a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800285c:	e051      	b.n	8002902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800286c:	d123      	bne.n	80028b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800287c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002886:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2220      	movs	r2, #32
 8002892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	f043 0204 	orr.w	r2, r3, #4
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e046      	b.n	8002944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028bc:	d021      	beq.n	8002902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028be:	f7fe fdbb 	bl	8001438 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d302      	bcc.n	80028d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d116      	bne.n	8002902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2220      	movs	r2, #32
 80028de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	f043 0220 	orr.w	r2, r3, #32
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e020      	b.n	8002944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	0c1b      	lsrs	r3, r3, #16
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b01      	cmp	r3, #1
 800290a:	d10c      	bne.n	8002926 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	43da      	mvns	r2, r3
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	4013      	ands	r3, r2
 8002918:	b29b      	uxth	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	bf14      	ite	ne
 800291e:	2301      	movne	r3, #1
 8002920:	2300      	moveq	r3, #0
 8002922:	b2db      	uxtb	r3, r3
 8002924:	e00b      	b.n	800293e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	43da      	mvns	r2, r3
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	4013      	ands	r3, r2
 8002932:	b29b      	uxth	r3, r3
 8002934:	2b00      	cmp	r3, #0
 8002936:	bf14      	ite	ne
 8002938:	2301      	movne	r3, #1
 800293a:	2300      	moveq	r3, #0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d18d      	bne.n	800285e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002958:	e02d      	b.n	80029b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f000 f8ce 	bl	8002afc <I2C_IsAcknowledgeFailed>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e02d      	b.n	80029c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002970:	d021      	beq.n	80029b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002972:	f7fe fd61 	bl	8001438 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	68ba      	ldr	r2, [r7, #8]
 800297e:	429a      	cmp	r2, r3
 8002980:	d302      	bcc.n	8002988 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d116      	bne.n	80029b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2220      	movs	r2, #32
 8002992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	f043 0220 	orr.w	r2, r3, #32
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e007      	b.n	80029c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c0:	2b80      	cmp	r3, #128	; 0x80
 80029c2:	d1ca      	bne.n	800295a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b084      	sub	sp, #16
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	60f8      	str	r0, [r7, #12]
 80029d6:	60b9      	str	r1, [r7, #8]
 80029d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029da:	e02d      	b.n	8002a38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f000 f88d 	bl	8002afc <I2C_IsAcknowledgeFailed>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e02d      	b.n	8002a48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f2:	d021      	beq.n	8002a38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029f4:	f7fe fd20 	bl	8001438 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d302      	bcc.n	8002a0a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d116      	bne.n	8002a38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2220      	movs	r2, #32
 8002a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a24:	f043 0220 	orr.w	r2, r3, #32
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e007      	b.n	8002a48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	f003 0304 	and.w	r3, r3, #4
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	d1ca      	bne.n	80029dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a5c:	e042      	b.n	8002ae4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	f003 0310 	and.w	r3, r3, #16
 8002a68:	2b10      	cmp	r3, #16
 8002a6a:	d119      	bne.n	8002aa0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f06f 0210 	mvn.w	r2, #16
 8002a74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e029      	b.n	8002af4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aa0:	f7fe fcca 	bl	8001438 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d302      	bcc.n	8002ab6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d116      	bne.n	8002ae4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	f043 0220 	orr.w	r2, r3, #32
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e007      	b.n	8002af4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aee:	2b40      	cmp	r3, #64	; 0x40
 8002af0:	d1b5      	bne.n	8002a5e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b12:	d11b      	bne.n	8002b4c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b1c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2220      	movs	r2, #32
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	f043 0204 	orr.w	r2, r3, #4
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e000      	b.n	8002b4e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
	...

08002b5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e267      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d075      	beq.n	8002c66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b7a:	4b88      	ldr	r3, [pc, #544]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 030c 	and.w	r3, r3, #12
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	d00c      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b86:	4b85      	ldr	r3, [pc, #532]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b8e:	2b08      	cmp	r3, #8
 8002b90:	d112      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b92:	4b82      	ldr	r3, [pc, #520]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b9e:	d10b      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba0:	4b7e      	ldr	r3, [pc, #504]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d05b      	beq.n	8002c64 <HAL_RCC_OscConfig+0x108>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d157      	bne.n	8002c64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e242      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc0:	d106      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x74>
 8002bc2:	4b76      	ldr	r3, [pc, #472]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a75      	ldr	r2, [pc, #468]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	e01d      	b.n	8002c0c <HAL_RCC_OscConfig+0xb0>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bd8:	d10c      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x98>
 8002bda:	4b70      	ldr	r3, [pc, #448]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a6f      	ldr	r2, [pc, #444]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002be0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	4b6d      	ldr	r3, [pc, #436]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a6c      	ldr	r2, [pc, #432]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	e00b      	b.n	8002c0c <HAL_RCC_OscConfig+0xb0>
 8002bf4:	4b69      	ldr	r3, [pc, #420]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a68      	ldr	r2, [pc, #416]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bfe:	6013      	str	r3, [r2, #0]
 8002c00:	4b66      	ldr	r3, [pc, #408]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a65      	ldr	r2, [pc, #404]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002c06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d013      	beq.n	8002c3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c14:	f7fe fc10 	bl	8001438 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c1c:	f7fe fc0c 	bl	8001438 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b64      	cmp	r3, #100	; 0x64
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e207      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c2e:	4b5b      	ldr	r3, [pc, #364]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0f0      	beq.n	8002c1c <HAL_RCC_OscConfig+0xc0>
 8002c3a:	e014      	b.n	8002c66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3c:	f7fe fbfc 	bl	8001438 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c44:	f7fe fbf8 	bl	8001438 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b64      	cmp	r3, #100	; 0x64
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e1f3      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c56:	4b51      	ldr	r3, [pc, #324]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f0      	bne.n	8002c44 <HAL_RCC_OscConfig+0xe8>
 8002c62:	e000      	b.n	8002c66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d063      	beq.n	8002d3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c72:	4b4a      	ldr	r3, [pc, #296]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 030c 	and.w	r3, r3, #12
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00b      	beq.n	8002c96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c7e:	4b47      	ldr	r3, [pc, #284]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	d11c      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c8a:	4b44      	ldr	r3, [pc, #272]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d116      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c96:	4b41      	ldr	r3, [pc, #260]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d005      	beq.n	8002cae <HAL_RCC_OscConfig+0x152>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d001      	beq.n	8002cae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e1c7      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cae:	4b3b      	ldr	r3, [pc, #236]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	4937      	ldr	r1, [pc, #220]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cc2:	e03a      	b.n	8002d3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d020      	beq.n	8002d0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ccc:	4b34      	ldr	r3, [pc, #208]	; (8002da0 <HAL_RCC_OscConfig+0x244>)
 8002cce:	2201      	movs	r2, #1
 8002cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd2:	f7fe fbb1 	bl	8001438 <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd8:	e008      	b.n	8002cec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cda:	f7fe fbad 	bl	8001438 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e1a8      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cec:	4b2b      	ldr	r3, [pc, #172]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0f0      	beq.n	8002cda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf8:	4b28      	ldr	r3, [pc, #160]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	4925      	ldr	r1, [pc, #148]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	600b      	str	r3, [r1, #0]
 8002d0c:	e015      	b.n	8002d3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d0e:	4b24      	ldr	r3, [pc, #144]	; (8002da0 <HAL_RCC_OscConfig+0x244>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d14:	f7fe fb90 	bl	8001438 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d1c:	f7fe fb8c 	bl	8001438 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e187      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d2e:	4b1b      	ldr	r3, [pc, #108]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f0      	bne.n	8002d1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d036      	beq.n	8002db4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d016      	beq.n	8002d7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d4e:	4b15      	ldr	r3, [pc, #84]	; (8002da4 <HAL_RCC_OscConfig+0x248>)
 8002d50:	2201      	movs	r2, #1
 8002d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d54:	f7fe fb70 	bl	8001438 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d5c:	f7fe fb6c 	bl	8001438 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e167      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d6e:	4b0b      	ldr	r3, [pc, #44]	; (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0f0      	beq.n	8002d5c <HAL_RCC_OscConfig+0x200>
 8002d7a:	e01b      	b.n	8002db4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d7c:	4b09      	ldr	r3, [pc, #36]	; (8002da4 <HAL_RCC_OscConfig+0x248>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d82:	f7fe fb59 	bl	8001438 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d88:	e00e      	b.n	8002da8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d8a:	f7fe fb55 	bl	8001438 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d907      	bls.n	8002da8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e150      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	42470000 	.word	0x42470000
 8002da4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002da8:	4b88      	ldr	r3, [pc, #544]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002daa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1ea      	bne.n	8002d8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 8097 	beq.w	8002ef0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dc6:	4b81      	ldr	r3, [pc, #516]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10f      	bne.n	8002df2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	60bb      	str	r3, [r7, #8]
 8002dd6:	4b7d      	ldr	r3, [pc, #500]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	4a7c      	ldr	r2, [pc, #496]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de0:	6413      	str	r3, [r2, #64]	; 0x40
 8002de2:	4b7a      	ldr	r3, [pc, #488]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dea:	60bb      	str	r3, [r7, #8]
 8002dec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dee:	2301      	movs	r3, #1
 8002df0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df2:	4b77      	ldr	r3, [pc, #476]	; (8002fd0 <HAL_RCC_OscConfig+0x474>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d118      	bne.n	8002e30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dfe:	4b74      	ldr	r3, [pc, #464]	; (8002fd0 <HAL_RCC_OscConfig+0x474>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a73      	ldr	r2, [pc, #460]	; (8002fd0 <HAL_RCC_OscConfig+0x474>)
 8002e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e0a:	f7fe fb15 	bl	8001438 <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e12:	f7fe fb11 	bl	8001438 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e10c      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e24:	4b6a      	ldr	r3, [pc, #424]	; (8002fd0 <HAL_RCC_OscConfig+0x474>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0f0      	beq.n	8002e12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d106      	bne.n	8002e46 <HAL_RCC_OscConfig+0x2ea>
 8002e38:	4b64      	ldr	r3, [pc, #400]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3c:	4a63      	ldr	r2, [pc, #396]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e3e:	f043 0301 	orr.w	r3, r3, #1
 8002e42:	6713      	str	r3, [r2, #112]	; 0x70
 8002e44:	e01c      	b.n	8002e80 <HAL_RCC_OscConfig+0x324>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	2b05      	cmp	r3, #5
 8002e4c:	d10c      	bne.n	8002e68 <HAL_RCC_OscConfig+0x30c>
 8002e4e:	4b5f      	ldr	r3, [pc, #380]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e52:	4a5e      	ldr	r2, [pc, #376]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e54:	f043 0304 	orr.w	r3, r3, #4
 8002e58:	6713      	str	r3, [r2, #112]	; 0x70
 8002e5a:	4b5c      	ldr	r3, [pc, #368]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5e:	4a5b      	ldr	r2, [pc, #364]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e60:	f043 0301 	orr.w	r3, r3, #1
 8002e64:	6713      	str	r3, [r2, #112]	; 0x70
 8002e66:	e00b      	b.n	8002e80 <HAL_RCC_OscConfig+0x324>
 8002e68:	4b58      	ldr	r3, [pc, #352]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6c:	4a57      	ldr	r2, [pc, #348]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e6e:	f023 0301 	bic.w	r3, r3, #1
 8002e72:	6713      	str	r3, [r2, #112]	; 0x70
 8002e74:	4b55      	ldr	r3, [pc, #340]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e78:	4a54      	ldr	r2, [pc, #336]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e7a:	f023 0304 	bic.w	r3, r3, #4
 8002e7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d015      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e88:	f7fe fad6 	bl	8001438 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e8e:	e00a      	b.n	8002ea6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e90:	f7fe fad2 	bl	8001438 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e0cb      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea6:	4b49      	ldr	r3, [pc, #292]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d0ee      	beq.n	8002e90 <HAL_RCC_OscConfig+0x334>
 8002eb2:	e014      	b.n	8002ede <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb4:	f7fe fac0 	bl	8001438 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eba:	e00a      	b.n	8002ed2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ebc:	f7fe fabc 	bl	8001438 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e0b5      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ed2:	4b3e      	ldr	r3, [pc, #248]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1ee      	bne.n	8002ebc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ede:	7dfb      	ldrb	r3, [r7, #23]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d105      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ee4:	4b39      	ldr	r3, [pc, #228]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee8:	4a38      	ldr	r2, [pc, #224]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002eea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f000 80a1 	beq.w	800303c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002efa:	4b34      	ldr	r3, [pc, #208]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 030c 	and.w	r3, r3, #12
 8002f02:	2b08      	cmp	r3, #8
 8002f04:	d05c      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d141      	bne.n	8002f92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f0e:	4b31      	ldr	r3, [pc, #196]	; (8002fd4 <HAL_RCC_OscConfig+0x478>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f14:	f7fe fa90 	bl	8001438 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f1c:	f7fe fa8c 	bl	8001438 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e087      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f2e:	4b27      	ldr	r3, [pc, #156]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	69da      	ldr	r2, [r3, #28]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	019b      	lsls	r3, r3, #6
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f50:	085b      	lsrs	r3, r3, #1
 8002f52:	3b01      	subs	r3, #1
 8002f54:	041b      	lsls	r3, r3, #16
 8002f56:	431a      	orrs	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5c:	061b      	lsls	r3, r3, #24
 8002f5e:	491b      	ldr	r1, [pc, #108]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f64:	4b1b      	ldr	r3, [pc, #108]	; (8002fd4 <HAL_RCC_OscConfig+0x478>)
 8002f66:	2201      	movs	r2, #1
 8002f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6a:	f7fe fa65 	bl	8001438 <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f72:	f7fe fa61 	bl	8001438 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e05c      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f84:	4b11      	ldr	r3, [pc, #68]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d0f0      	beq.n	8002f72 <HAL_RCC_OscConfig+0x416>
 8002f90:	e054      	b.n	800303c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f92:	4b10      	ldr	r3, [pc, #64]	; (8002fd4 <HAL_RCC_OscConfig+0x478>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f98:	f7fe fa4e 	bl	8001438 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fa0:	f7fe fa4a 	bl	8001438 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e045      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb2:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f0      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x444>
 8002fbe:	e03d      	b.n	800303c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d107      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e038      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	40007000 	.word	0x40007000
 8002fd4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fd8:	4b1b      	ldr	r3, [pc, #108]	; (8003048 <HAL_RCC_OscConfig+0x4ec>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d028      	beq.n	8003038 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d121      	bne.n	8003038 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d11a      	bne.n	8003038 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003008:	4013      	ands	r3, r2
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800300e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003010:	4293      	cmp	r3, r2
 8003012:	d111      	bne.n	8003038 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301e:	085b      	lsrs	r3, r3, #1
 8003020:	3b01      	subs	r3, #1
 8003022:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003024:	429a      	cmp	r2, r3
 8003026:	d107      	bne.n	8003038 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003032:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003034:	429a      	cmp	r2, r3
 8003036:	d001      	beq.n	800303c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e000      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3718      	adds	r7, #24
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40023800 	.word	0x40023800

0800304c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d101      	bne.n	8003060 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e0cc      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003060:	4b68      	ldr	r3, [pc, #416]	; (8003204 <HAL_RCC_ClockConfig+0x1b8>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d90c      	bls.n	8003088 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306e:	4b65      	ldr	r3, [pc, #404]	; (8003204 <HAL_RCC_ClockConfig+0x1b8>)
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003076:	4b63      	ldr	r3, [pc, #396]	; (8003204 <HAL_RCC_ClockConfig+0x1b8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	429a      	cmp	r2, r3
 8003082:	d001      	beq.n	8003088 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e0b8      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d020      	beq.n	80030d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b00      	cmp	r3, #0
 800309e:	d005      	beq.n	80030ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030a0:	4b59      	ldr	r3, [pc, #356]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	4a58      	ldr	r2, [pc, #352]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80030a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0308 	and.w	r3, r3, #8
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d005      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030b8:	4b53      	ldr	r3, [pc, #332]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	4a52      	ldr	r2, [pc, #328]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80030be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030c4:	4b50      	ldr	r3, [pc, #320]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	494d      	ldr	r1, [pc, #308]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d044      	beq.n	800316c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d107      	bne.n	80030fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ea:	4b47      	ldr	r3, [pc, #284]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d119      	bne.n	800312a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e07f      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d003      	beq.n	800310a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003106:	2b03      	cmp	r3, #3
 8003108:	d107      	bne.n	800311a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800310a:	4b3f      	ldr	r3, [pc, #252]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d109      	bne.n	800312a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e06f      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800311a:	4b3b      	ldr	r3, [pc, #236]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e067      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800312a:	4b37      	ldr	r3, [pc, #220]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f023 0203 	bic.w	r2, r3, #3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	4934      	ldr	r1, [pc, #208]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 8003138:	4313      	orrs	r3, r2
 800313a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800313c:	f7fe f97c 	bl	8001438 <HAL_GetTick>
 8003140:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003142:	e00a      	b.n	800315a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003144:	f7fe f978 	bl	8001438 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003152:	4293      	cmp	r3, r2
 8003154:	d901      	bls.n	800315a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e04f      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800315a:	4b2b      	ldr	r3, [pc, #172]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 020c 	and.w	r2, r3, #12
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	429a      	cmp	r2, r3
 800316a:	d1eb      	bne.n	8003144 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800316c:	4b25      	ldr	r3, [pc, #148]	; (8003204 <HAL_RCC_ClockConfig+0x1b8>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	429a      	cmp	r2, r3
 8003178:	d20c      	bcs.n	8003194 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800317a:	4b22      	ldr	r3, [pc, #136]	; (8003204 <HAL_RCC_ClockConfig+0x1b8>)
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003182:	4b20      	ldr	r3, [pc, #128]	; (8003204 <HAL_RCC_ClockConfig+0x1b8>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0307 	and.w	r3, r3, #7
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d001      	beq.n	8003194 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e032      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	d008      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031a0:	4b19      	ldr	r3, [pc, #100]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	4916      	ldr	r1, [pc, #88]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d009      	beq.n	80031d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031be:	4b12      	ldr	r3, [pc, #72]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	490e      	ldr	r1, [pc, #56]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031d2:	f000 f821 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 80031d6:	4602      	mov	r2, r0
 80031d8:	4b0b      	ldr	r3, [pc, #44]	; (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	091b      	lsrs	r3, r3, #4
 80031de:	f003 030f 	and.w	r3, r3, #15
 80031e2:	490a      	ldr	r1, [pc, #40]	; (800320c <HAL_RCC_ClockConfig+0x1c0>)
 80031e4:	5ccb      	ldrb	r3, [r1, r3]
 80031e6:	fa22 f303 	lsr.w	r3, r2, r3
 80031ea:	4a09      	ldr	r2, [pc, #36]	; (8003210 <HAL_RCC_ClockConfig+0x1c4>)
 80031ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031ee:	4b09      	ldr	r3, [pc, #36]	; (8003214 <HAL_RCC_ClockConfig+0x1c8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7fe f8dc 	bl	80013b0 <HAL_InitTick>

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40023c00 	.word	0x40023c00
 8003208:	40023800 	.word	0x40023800
 800320c:	08003b64 	.word	0x08003b64
 8003210:	20000010 	.word	0x20000010
 8003214:	20000014 	.word	0x20000014

08003218 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003218:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800321c:	b094      	sub	sp, #80	; 0x50
 800321e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003220:	2300      	movs	r3, #0
 8003222:	647b      	str	r3, [r7, #68]	; 0x44
 8003224:	2300      	movs	r3, #0
 8003226:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003228:	2300      	movs	r3, #0
 800322a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800322c:	2300      	movs	r3, #0
 800322e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003230:	4b79      	ldr	r3, [pc, #484]	; (8003418 <HAL_RCC_GetSysClockFreq+0x200>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f003 030c 	and.w	r3, r3, #12
 8003238:	2b08      	cmp	r3, #8
 800323a:	d00d      	beq.n	8003258 <HAL_RCC_GetSysClockFreq+0x40>
 800323c:	2b08      	cmp	r3, #8
 800323e:	f200 80e1 	bhi.w	8003404 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003242:	2b00      	cmp	r3, #0
 8003244:	d002      	beq.n	800324c <HAL_RCC_GetSysClockFreq+0x34>
 8003246:	2b04      	cmp	r3, #4
 8003248:	d003      	beq.n	8003252 <HAL_RCC_GetSysClockFreq+0x3a>
 800324a:	e0db      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800324c:	4b73      	ldr	r3, [pc, #460]	; (800341c <HAL_RCC_GetSysClockFreq+0x204>)
 800324e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003250:	e0db      	b.n	800340a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003252:	4b73      	ldr	r3, [pc, #460]	; (8003420 <HAL_RCC_GetSysClockFreq+0x208>)
 8003254:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003256:	e0d8      	b.n	800340a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003258:	4b6f      	ldr	r3, [pc, #444]	; (8003418 <HAL_RCC_GetSysClockFreq+0x200>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003260:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003262:	4b6d      	ldr	r3, [pc, #436]	; (8003418 <HAL_RCC_GetSysClockFreq+0x200>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d063      	beq.n	8003336 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800326e:	4b6a      	ldr	r3, [pc, #424]	; (8003418 <HAL_RCC_GetSysClockFreq+0x200>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	099b      	lsrs	r3, r3, #6
 8003274:	2200      	movs	r2, #0
 8003276:	63bb      	str	r3, [r7, #56]	; 0x38
 8003278:	63fa      	str	r2, [r7, #60]	; 0x3c
 800327a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800327c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003280:	633b      	str	r3, [r7, #48]	; 0x30
 8003282:	2300      	movs	r3, #0
 8003284:	637b      	str	r3, [r7, #52]	; 0x34
 8003286:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800328a:	4622      	mov	r2, r4
 800328c:	462b      	mov	r3, r5
 800328e:	f04f 0000 	mov.w	r0, #0
 8003292:	f04f 0100 	mov.w	r1, #0
 8003296:	0159      	lsls	r1, r3, #5
 8003298:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800329c:	0150      	lsls	r0, r2, #5
 800329e:	4602      	mov	r2, r0
 80032a0:	460b      	mov	r3, r1
 80032a2:	4621      	mov	r1, r4
 80032a4:	1a51      	subs	r1, r2, r1
 80032a6:	6139      	str	r1, [r7, #16]
 80032a8:	4629      	mov	r1, r5
 80032aa:	eb63 0301 	sbc.w	r3, r3, r1
 80032ae:	617b      	str	r3, [r7, #20]
 80032b0:	f04f 0200 	mov.w	r2, #0
 80032b4:	f04f 0300 	mov.w	r3, #0
 80032b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032bc:	4659      	mov	r1, fp
 80032be:	018b      	lsls	r3, r1, #6
 80032c0:	4651      	mov	r1, sl
 80032c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032c6:	4651      	mov	r1, sl
 80032c8:	018a      	lsls	r2, r1, #6
 80032ca:	4651      	mov	r1, sl
 80032cc:	ebb2 0801 	subs.w	r8, r2, r1
 80032d0:	4659      	mov	r1, fp
 80032d2:	eb63 0901 	sbc.w	r9, r3, r1
 80032d6:	f04f 0200 	mov.w	r2, #0
 80032da:	f04f 0300 	mov.w	r3, #0
 80032de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032ea:	4690      	mov	r8, r2
 80032ec:	4699      	mov	r9, r3
 80032ee:	4623      	mov	r3, r4
 80032f0:	eb18 0303 	adds.w	r3, r8, r3
 80032f4:	60bb      	str	r3, [r7, #8]
 80032f6:	462b      	mov	r3, r5
 80032f8:	eb49 0303 	adc.w	r3, r9, r3
 80032fc:	60fb      	str	r3, [r7, #12]
 80032fe:	f04f 0200 	mov.w	r2, #0
 8003302:	f04f 0300 	mov.w	r3, #0
 8003306:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800330a:	4629      	mov	r1, r5
 800330c:	024b      	lsls	r3, r1, #9
 800330e:	4621      	mov	r1, r4
 8003310:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003314:	4621      	mov	r1, r4
 8003316:	024a      	lsls	r2, r1, #9
 8003318:	4610      	mov	r0, r2
 800331a:	4619      	mov	r1, r3
 800331c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800331e:	2200      	movs	r2, #0
 8003320:	62bb      	str	r3, [r7, #40]	; 0x28
 8003322:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003324:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003328:	f7fc ff54 	bl	80001d4 <__aeabi_uldivmod>
 800332c:	4602      	mov	r2, r0
 800332e:	460b      	mov	r3, r1
 8003330:	4613      	mov	r3, r2
 8003332:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003334:	e058      	b.n	80033e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003336:	4b38      	ldr	r3, [pc, #224]	; (8003418 <HAL_RCC_GetSysClockFreq+0x200>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	099b      	lsrs	r3, r3, #6
 800333c:	2200      	movs	r2, #0
 800333e:	4618      	mov	r0, r3
 8003340:	4611      	mov	r1, r2
 8003342:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003346:	623b      	str	r3, [r7, #32]
 8003348:	2300      	movs	r3, #0
 800334a:	627b      	str	r3, [r7, #36]	; 0x24
 800334c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003350:	4642      	mov	r2, r8
 8003352:	464b      	mov	r3, r9
 8003354:	f04f 0000 	mov.w	r0, #0
 8003358:	f04f 0100 	mov.w	r1, #0
 800335c:	0159      	lsls	r1, r3, #5
 800335e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003362:	0150      	lsls	r0, r2, #5
 8003364:	4602      	mov	r2, r0
 8003366:	460b      	mov	r3, r1
 8003368:	4641      	mov	r1, r8
 800336a:	ebb2 0a01 	subs.w	sl, r2, r1
 800336e:	4649      	mov	r1, r9
 8003370:	eb63 0b01 	sbc.w	fp, r3, r1
 8003374:	f04f 0200 	mov.w	r2, #0
 8003378:	f04f 0300 	mov.w	r3, #0
 800337c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003380:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003384:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003388:	ebb2 040a 	subs.w	r4, r2, sl
 800338c:	eb63 050b 	sbc.w	r5, r3, fp
 8003390:	f04f 0200 	mov.w	r2, #0
 8003394:	f04f 0300 	mov.w	r3, #0
 8003398:	00eb      	lsls	r3, r5, #3
 800339a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800339e:	00e2      	lsls	r2, r4, #3
 80033a0:	4614      	mov	r4, r2
 80033a2:	461d      	mov	r5, r3
 80033a4:	4643      	mov	r3, r8
 80033a6:	18e3      	adds	r3, r4, r3
 80033a8:	603b      	str	r3, [r7, #0]
 80033aa:	464b      	mov	r3, r9
 80033ac:	eb45 0303 	adc.w	r3, r5, r3
 80033b0:	607b      	str	r3, [r7, #4]
 80033b2:	f04f 0200 	mov.w	r2, #0
 80033b6:	f04f 0300 	mov.w	r3, #0
 80033ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033be:	4629      	mov	r1, r5
 80033c0:	028b      	lsls	r3, r1, #10
 80033c2:	4621      	mov	r1, r4
 80033c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033c8:	4621      	mov	r1, r4
 80033ca:	028a      	lsls	r2, r1, #10
 80033cc:	4610      	mov	r0, r2
 80033ce:	4619      	mov	r1, r3
 80033d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033d2:	2200      	movs	r2, #0
 80033d4:	61bb      	str	r3, [r7, #24]
 80033d6:	61fa      	str	r2, [r7, #28]
 80033d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033dc:	f7fc fefa 	bl	80001d4 <__aeabi_uldivmod>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4613      	mov	r3, r2
 80033e6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033e8:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <HAL_RCC_GetSysClockFreq+0x200>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	0c1b      	lsrs	r3, r3, #16
 80033ee:	f003 0303 	and.w	r3, r3, #3
 80033f2:	3301      	adds	r3, #1
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80033f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003400:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003402:	e002      	b.n	800340a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003404:	4b05      	ldr	r3, [pc, #20]	; (800341c <HAL_RCC_GetSysClockFreq+0x204>)
 8003406:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003408:	bf00      	nop
    }
  }
  return sysclockfreq;
 800340a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800340c:	4618      	mov	r0, r3
 800340e:	3750      	adds	r7, #80	; 0x50
 8003410:	46bd      	mov	sp, r7
 8003412:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003416:	bf00      	nop
 8003418:	40023800 	.word	0x40023800
 800341c:	00f42400 	.word	0x00f42400
 8003420:	007a1200 	.word	0x007a1200

08003424 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003428:	4b03      	ldr	r3, [pc, #12]	; (8003438 <HAL_RCC_GetHCLKFreq+0x14>)
 800342a:	681b      	ldr	r3, [r3, #0]
}
 800342c:	4618      	mov	r0, r3
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	20000010 	.word	0x20000010

0800343c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003440:	f7ff fff0 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 8003444:	4602      	mov	r2, r0
 8003446:	4b05      	ldr	r3, [pc, #20]	; (800345c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	0a9b      	lsrs	r3, r3, #10
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	4903      	ldr	r1, [pc, #12]	; (8003460 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003452:	5ccb      	ldrb	r3, [r1, r3]
 8003454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003458:	4618      	mov	r0, r3
 800345a:	bd80      	pop	{r7, pc}
 800345c:	40023800 	.word	0x40023800
 8003460:	08003b74 	.word	0x08003b74

08003464 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003468:	f7ff ffdc 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 800346c:	4602      	mov	r2, r0
 800346e:	4b05      	ldr	r3, [pc, #20]	; (8003484 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	0b5b      	lsrs	r3, r3, #13
 8003474:	f003 0307 	and.w	r3, r3, #7
 8003478:	4903      	ldr	r1, [pc, #12]	; (8003488 <HAL_RCC_GetPCLK2Freq+0x24>)
 800347a:	5ccb      	ldrb	r3, [r1, r3]
 800347c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003480:	4618      	mov	r0, r3
 8003482:	bd80      	pop	{r7, pc}
 8003484:	40023800 	.word	0x40023800
 8003488:	08003b74 	.word	0x08003b74

0800348c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e03f      	b.n	800351e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d106      	bne.n	80034b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7fd feac 	bl	8001210 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2224      	movs	r2, #36	; 0x24
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68da      	ldr	r2, [r3, #12]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 f829 	bl	8003528 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	691a      	ldr	r2, [r3, #16]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	695a      	ldr	r2, [r3, #20]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68da      	ldr	r2, [r3, #12]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003504:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2220      	movs	r2, #32
 8003510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2220      	movs	r2, #32
 8003518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
	...

08003528 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003528:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800352c:	b0c0      	sub	sp, #256	; 0x100
 800352e:	af00      	add	r7, sp, #0
 8003530:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003544:	68d9      	ldr	r1, [r3, #12]
 8003546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	ea40 0301 	orr.w	r3, r0, r1
 8003550:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	431a      	orrs	r2, r3
 8003560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	431a      	orrs	r2, r3
 8003568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	4313      	orrs	r3, r2
 8003570:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003580:	f021 010c 	bic.w	r1, r1, #12
 8003584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800358e:	430b      	orrs	r3, r1
 8003590:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800359e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a2:	6999      	ldr	r1, [r3, #24]
 80035a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	ea40 0301 	orr.w	r3, r0, r1
 80035ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	4b8f      	ldr	r3, [pc, #572]	; (80037f4 <UART_SetConfig+0x2cc>)
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d005      	beq.n	80035c8 <UART_SetConfig+0xa0>
 80035bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	4b8d      	ldr	r3, [pc, #564]	; (80037f8 <UART_SetConfig+0x2d0>)
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d104      	bne.n	80035d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80035c8:	f7ff ff4c 	bl	8003464 <HAL_RCC_GetPCLK2Freq>
 80035cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80035d0:	e003      	b.n	80035da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80035d2:	f7ff ff33 	bl	800343c <HAL_RCC_GetPCLK1Freq>
 80035d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035e4:	f040 810c 	bne.w	8003800 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035ec:	2200      	movs	r2, #0
 80035ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80035f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80035f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80035fa:	4622      	mov	r2, r4
 80035fc:	462b      	mov	r3, r5
 80035fe:	1891      	adds	r1, r2, r2
 8003600:	65b9      	str	r1, [r7, #88]	; 0x58
 8003602:	415b      	adcs	r3, r3
 8003604:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003606:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800360a:	4621      	mov	r1, r4
 800360c:	eb12 0801 	adds.w	r8, r2, r1
 8003610:	4629      	mov	r1, r5
 8003612:	eb43 0901 	adc.w	r9, r3, r1
 8003616:	f04f 0200 	mov.w	r2, #0
 800361a:	f04f 0300 	mov.w	r3, #0
 800361e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003622:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003626:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800362a:	4690      	mov	r8, r2
 800362c:	4699      	mov	r9, r3
 800362e:	4623      	mov	r3, r4
 8003630:	eb18 0303 	adds.w	r3, r8, r3
 8003634:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003638:	462b      	mov	r3, r5
 800363a:	eb49 0303 	adc.w	r3, r9, r3
 800363e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800364e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003652:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003656:	460b      	mov	r3, r1
 8003658:	18db      	adds	r3, r3, r3
 800365a:	653b      	str	r3, [r7, #80]	; 0x50
 800365c:	4613      	mov	r3, r2
 800365e:	eb42 0303 	adc.w	r3, r2, r3
 8003662:	657b      	str	r3, [r7, #84]	; 0x54
 8003664:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003668:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800366c:	f7fc fdb2 	bl	80001d4 <__aeabi_uldivmod>
 8003670:	4602      	mov	r2, r0
 8003672:	460b      	mov	r3, r1
 8003674:	4b61      	ldr	r3, [pc, #388]	; (80037fc <UART_SetConfig+0x2d4>)
 8003676:	fba3 2302 	umull	r2, r3, r3, r2
 800367a:	095b      	lsrs	r3, r3, #5
 800367c:	011c      	lsls	r4, r3, #4
 800367e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003682:	2200      	movs	r2, #0
 8003684:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003688:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800368c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003690:	4642      	mov	r2, r8
 8003692:	464b      	mov	r3, r9
 8003694:	1891      	adds	r1, r2, r2
 8003696:	64b9      	str	r1, [r7, #72]	; 0x48
 8003698:	415b      	adcs	r3, r3
 800369a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800369c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80036a0:	4641      	mov	r1, r8
 80036a2:	eb12 0a01 	adds.w	sl, r2, r1
 80036a6:	4649      	mov	r1, r9
 80036a8:	eb43 0b01 	adc.w	fp, r3, r1
 80036ac:	f04f 0200 	mov.w	r2, #0
 80036b0:	f04f 0300 	mov.w	r3, #0
 80036b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80036b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80036bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036c0:	4692      	mov	sl, r2
 80036c2:	469b      	mov	fp, r3
 80036c4:	4643      	mov	r3, r8
 80036c6:	eb1a 0303 	adds.w	r3, sl, r3
 80036ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80036ce:	464b      	mov	r3, r9
 80036d0:	eb4b 0303 	adc.w	r3, fp, r3
 80036d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80036d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80036e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80036ec:	460b      	mov	r3, r1
 80036ee:	18db      	adds	r3, r3, r3
 80036f0:	643b      	str	r3, [r7, #64]	; 0x40
 80036f2:	4613      	mov	r3, r2
 80036f4:	eb42 0303 	adc.w	r3, r2, r3
 80036f8:	647b      	str	r3, [r7, #68]	; 0x44
 80036fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80036fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003702:	f7fc fd67 	bl	80001d4 <__aeabi_uldivmod>
 8003706:	4602      	mov	r2, r0
 8003708:	460b      	mov	r3, r1
 800370a:	4611      	mov	r1, r2
 800370c:	4b3b      	ldr	r3, [pc, #236]	; (80037fc <UART_SetConfig+0x2d4>)
 800370e:	fba3 2301 	umull	r2, r3, r3, r1
 8003712:	095b      	lsrs	r3, r3, #5
 8003714:	2264      	movs	r2, #100	; 0x64
 8003716:	fb02 f303 	mul.w	r3, r2, r3
 800371a:	1acb      	subs	r3, r1, r3
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003722:	4b36      	ldr	r3, [pc, #216]	; (80037fc <UART_SetConfig+0x2d4>)
 8003724:	fba3 2302 	umull	r2, r3, r3, r2
 8003728:	095b      	lsrs	r3, r3, #5
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003730:	441c      	add	r4, r3
 8003732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003736:	2200      	movs	r2, #0
 8003738:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800373c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003740:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003744:	4642      	mov	r2, r8
 8003746:	464b      	mov	r3, r9
 8003748:	1891      	adds	r1, r2, r2
 800374a:	63b9      	str	r1, [r7, #56]	; 0x38
 800374c:	415b      	adcs	r3, r3
 800374e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003750:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003754:	4641      	mov	r1, r8
 8003756:	1851      	adds	r1, r2, r1
 8003758:	6339      	str	r1, [r7, #48]	; 0x30
 800375a:	4649      	mov	r1, r9
 800375c:	414b      	adcs	r3, r1
 800375e:	637b      	str	r3, [r7, #52]	; 0x34
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800376c:	4659      	mov	r1, fp
 800376e:	00cb      	lsls	r3, r1, #3
 8003770:	4651      	mov	r1, sl
 8003772:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003776:	4651      	mov	r1, sl
 8003778:	00ca      	lsls	r2, r1, #3
 800377a:	4610      	mov	r0, r2
 800377c:	4619      	mov	r1, r3
 800377e:	4603      	mov	r3, r0
 8003780:	4642      	mov	r2, r8
 8003782:	189b      	adds	r3, r3, r2
 8003784:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003788:	464b      	mov	r3, r9
 800378a:	460a      	mov	r2, r1
 800378c:	eb42 0303 	adc.w	r3, r2, r3
 8003790:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80037a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80037a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80037a8:	460b      	mov	r3, r1
 80037aa:	18db      	adds	r3, r3, r3
 80037ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80037ae:	4613      	mov	r3, r2
 80037b0:	eb42 0303 	adc.w	r3, r2, r3
 80037b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80037be:	f7fc fd09 	bl	80001d4 <__aeabi_uldivmod>
 80037c2:	4602      	mov	r2, r0
 80037c4:	460b      	mov	r3, r1
 80037c6:	4b0d      	ldr	r3, [pc, #52]	; (80037fc <UART_SetConfig+0x2d4>)
 80037c8:	fba3 1302 	umull	r1, r3, r3, r2
 80037cc:	095b      	lsrs	r3, r3, #5
 80037ce:	2164      	movs	r1, #100	; 0x64
 80037d0:	fb01 f303 	mul.w	r3, r1, r3
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	3332      	adds	r3, #50	; 0x32
 80037da:	4a08      	ldr	r2, [pc, #32]	; (80037fc <UART_SetConfig+0x2d4>)
 80037dc:	fba2 2303 	umull	r2, r3, r2, r3
 80037e0:	095b      	lsrs	r3, r3, #5
 80037e2:	f003 0207 	and.w	r2, r3, #7
 80037e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4422      	add	r2, r4
 80037ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037f0:	e105      	b.n	80039fe <UART_SetConfig+0x4d6>
 80037f2:	bf00      	nop
 80037f4:	40011000 	.word	0x40011000
 80037f8:	40011400 	.word	0x40011400
 80037fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003800:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003804:	2200      	movs	r2, #0
 8003806:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800380a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800380e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003812:	4642      	mov	r2, r8
 8003814:	464b      	mov	r3, r9
 8003816:	1891      	adds	r1, r2, r2
 8003818:	6239      	str	r1, [r7, #32]
 800381a:	415b      	adcs	r3, r3
 800381c:	627b      	str	r3, [r7, #36]	; 0x24
 800381e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003822:	4641      	mov	r1, r8
 8003824:	1854      	adds	r4, r2, r1
 8003826:	4649      	mov	r1, r9
 8003828:	eb43 0501 	adc.w	r5, r3, r1
 800382c:	f04f 0200 	mov.w	r2, #0
 8003830:	f04f 0300 	mov.w	r3, #0
 8003834:	00eb      	lsls	r3, r5, #3
 8003836:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800383a:	00e2      	lsls	r2, r4, #3
 800383c:	4614      	mov	r4, r2
 800383e:	461d      	mov	r5, r3
 8003840:	4643      	mov	r3, r8
 8003842:	18e3      	adds	r3, r4, r3
 8003844:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003848:	464b      	mov	r3, r9
 800384a:	eb45 0303 	adc.w	r3, r5, r3
 800384e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800385e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003862:	f04f 0200 	mov.w	r2, #0
 8003866:	f04f 0300 	mov.w	r3, #0
 800386a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800386e:	4629      	mov	r1, r5
 8003870:	008b      	lsls	r3, r1, #2
 8003872:	4621      	mov	r1, r4
 8003874:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003878:	4621      	mov	r1, r4
 800387a:	008a      	lsls	r2, r1, #2
 800387c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003880:	f7fc fca8 	bl	80001d4 <__aeabi_uldivmod>
 8003884:	4602      	mov	r2, r0
 8003886:	460b      	mov	r3, r1
 8003888:	4b60      	ldr	r3, [pc, #384]	; (8003a0c <UART_SetConfig+0x4e4>)
 800388a:	fba3 2302 	umull	r2, r3, r3, r2
 800388e:	095b      	lsrs	r3, r3, #5
 8003890:	011c      	lsls	r4, r3, #4
 8003892:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003896:	2200      	movs	r2, #0
 8003898:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800389c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80038a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80038a4:	4642      	mov	r2, r8
 80038a6:	464b      	mov	r3, r9
 80038a8:	1891      	adds	r1, r2, r2
 80038aa:	61b9      	str	r1, [r7, #24]
 80038ac:	415b      	adcs	r3, r3
 80038ae:	61fb      	str	r3, [r7, #28]
 80038b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038b4:	4641      	mov	r1, r8
 80038b6:	1851      	adds	r1, r2, r1
 80038b8:	6139      	str	r1, [r7, #16]
 80038ba:	4649      	mov	r1, r9
 80038bc:	414b      	adcs	r3, r1
 80038be:	617b      	str	r3, [r7, #20]
 80038c0:	f04f 0200 	mov.w	r2, #0
 80038c4:	f04f 0300 	mov.w	r3, #0
 80038c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038cc:	4659      	mov	r1, fp
 80038ce:	00cb      	lsls	r3, r1, #3
 80038d0:	4651      	mov	r1, sl
 80038d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038d6:	4651      	mov	r1, sl
 80038d8:	00ca      	lsls	r2, r1, #3
 80038da:	4610      	mov	r0, r2
 80038dc:	4619      	mov	r1, r3
 80038de:	4603      	mov	r3, r0
 80038e0:	4642      	mov	r2, r8
 80038e2:	189b      	adds	r3, r3, r2
 80038e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80038e8:	464b      	mov	r3, r9
 80038ea:	460a      	mov	r2, r1
 80038ec:	eb42 0303 	adc.w	r3, r2, r3
 80038f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80038f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80038fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003900:	f04f 0200 	mov.w	r2, #0
 8003904:	f04f 0300 	mov.w	r3, #0
 8003908:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800390c:	4649      	mov	r1, r9
 800390e:	008b      	lsls	r3, r1, #2
 8003910:	4641      	mov	r1, r8
 8003912:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003916:	4641      	mov	r1, r8
 8003918:	008a      	lsls	r2, r1, #2
 800391a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800391e:	f7fc fc59 	bl	80001d4 <__aeabi_uldivmod>
 8003922:	4602      	mov	r2, r0
 8003924:	460b      	mov	r3, r1
 8003926:	4b39      	ldr	r3, [pc, #228]	; (8003a0c <UART_SetConfig+0x4e4>)
 8003928:	fba3 1302 	umull	r1, r3, r3, r2
 800392c:	095b      	lsrs	r3, r3, #5
 800392e:	2164      	movs	r1, #100	; 0x64
 8003930:	fb01 f303 	mul.w	r3, r1, r3
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	011b      	lsls	r3, r3, #4
 8003938:	3332      	adds	r3, #50	; 0x32
 800393a:	4a34      	ldr	r2, [pc, #208]	; (8003a0c <UART_SetConfig+0x4e4>)
 800393c:	fba2 2303 	umull	r2, r3, r2, r3
 8003940:	095b      	lsrs	r3, r3, #5
 8003942:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003946:	441c      	add	r4, r3
 8003948:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800394c:	2200      	movs	r2, #0
 800394e:	673b      	str	r3, [r7, #112]	; 0x70
 8003950:	677a      	str	r2, [r7, #116]	; 0x74
 8003952:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003956:	4642      	mov	r2, r8
 8003958:	464b      	mov	r3, r9
 800395a:	1891      	adds	r1, r2, r2
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	415b      	adcs	r3, r3
 8003960:	60fb      	str	r3, [r7, #12]
 8003962:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003966:	4641      	mov	r1, r8
 8003968:	1851      	adds	r1, r2, r1
 800396a:	6039      	str	r1, [r7, #0]
 800396c:	4649      	mov	r1, r9
 800396e:	414b      	adcs	r3, r1
 8003970:	607b      	str	r3, [r7, #4]
 8003972:	f04f 0200 	mov.w	r2, #0
 8003976:	f04f 0300 	mov.w	r3, #0
 800397a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800397e:	4659      	mov	r1, fp
 8003980:	00cb      	lsls	r3, r1, #3
 8003982:	4651      	mov	r1, sl
 8003984:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003988:	4651      	mov	r1, sl
 800398a:	00ca      	lsls	r2, r1, #3
 800398c:	4610      	mov	r0, r2
 800398e:	4619      	mov	r1, r3
 8003990:	4603      	mov	r3, r0
 8003992:	4642      	mov	r2, r8
 8003994:	189b      	adds	r3, r3, r2
 8003996:	66bb      	str	r3, [r7, #104]	; 0x68
 8003998:	464b      	mov	r3, r9
 800399a:	460a      	mov	r2, r1
 800399c:	eb42 0303 	adc.w	r3, r2, r3
 80039a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	663b      	str	r3, [r7, #96]	; 0x60
 80039ac:	667a      	str	r2, [r7, #100]	; 0x64
 80039ae:	f04f 0200 	mov.w	r2, #0
 80039b2:	f04f 0300 	mov.w	r3, #0
 80039b6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80039ba:	4649      	mov	r1, r9
 80039bc:	008b      	lsls	r3, r1, #2
 80039be:	4641      	mov	r1, r8
 80039c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039c4:	4641      	mov	r1, r8
 80039c6:	008a      	lsls	r2, r1, #2
 80039c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80039cc:	f7fc fc02 	bl	80001d4 <__aeabi_uldivmod>
 80039d0:	4602      	mov	r2, r0
 80039d2:	460b      	mov	r3, r1
 80039d4:	4b0d      	ldr	r3, [pc, #52]	; (8003a0c <UART_SetConfig+0x4e4>)
 80039d6:	fba3 1302 	umull	r1, r3, r3, r2
 80039da:	095b      	lsrs	r3, r3, #5
 80039dc:	2164      	movs	r1, #100	; 0x64
 80039de:	fb01 f303 	mul.w	r3, r1, r3
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	011b      	lsls	r3, r3, #4
 80039e6:	3332      	adds	r3, #50	; 0x32
 80039e8:	4a08      	ldr	r2, [pc, #32]	; (8003a0c <UART_SetConfig+0x4e4>)
 80039ea:	fba2 2303 	umull	r2, r3, r2, r3
 80039ee:	095b      	lsrs	r3, r3, #5
 80039f0:	f003 020f 	and.w	r2, r3, #15
 80039f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4422      	add	r2, r4
 80039fc:	609a      	str	r2, [r3, #8]
}
 80039fe:	bf00      	nop
 8003a00:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003a04:	46bd      	mov	sp, r7
 8003a06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a0a:	bf00      	nop
 8003a0c:	51eb851f 	.word	0x51eb851f

08003a10 <__libc_init_array>:
 8003a10:	b570      	push	{r4, r5, r6, lr}
 8003a12:	4d0d      	ldr	r5, [pc, #52]	; (8003a48 <__libc_init_array+0x38>)
 8003a14:	4c0d      	ldr	r4, [pc, #52]	; (8003a4c <__libc_init_array+0x3c>)
 8003a16:	1b64      	subs	r4, r4, r5
 8003a18:	10a4      	asrs	r4, r4, #2
 8003a1a:	2600      	movs	r6, #0
 8003a1c:	42a6      	cmp	r6, r4
 8003a1e:	d109      	bne.n	8003a34 <__libc_init_array+0x24>
 8003a20:	4d0b      	ldr	r5, [pc, #44]	; (8003a50 <__libc_init_array+0x40>)
 8003a22:	4c0c      	ldr	r4, [pc, #48]	; (8003a54 <__libc_init_array+0x44>)
 8003a24:	f000 f87c 	bl	8003b20 <_init>
 8003a28:	1b64      	subs	r4, r4, r5
 8003a2a:	10a4      	asrs	r4, r4, #2
 8003a2c:	2600      	movs	r6, #0
 8003a2e:	42a6      	cmp	r6, r4
 8003a30:	d105      	bne.n	8003a3e <__libc_init_array+0x2e>
 8003a32:	bd70      	pop	{r4, r5, r6, pc}
 8003a34:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a38:	4798      	blx	r3
 8003a3a:	3601      	adds	r6, #1
 8003a3c:	e7ee      	b.n	8003a1c <__libc_init_array+0xc>
 8003a3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a42:	4798      	blx	r3
 8003a44:	3601      	adds	r6, #1
 8003a46:	e7f2      	b.n	8003a2e <__libc_init_array+0x1e>
 8003a48:	08003bac 	.word	0x08003bac
 8003a4c:	08003bac 	.word	0x08003bac
 8003a50:	08003bac 	.word	0x08003bac
 8003a54:	08003bb0 	.word	0x08003bb0

08003a58 <__itoa>:
 8003a58:	1e93      	subs	r3, r2, #2
 8003a5a:	2b22      	cmp	r3, #34	; 0x22
 8003a5c:	b510      	push	{r4, lr}
 8003a5e:	460c      	mov	r4, r1
 8003a60:	d904      	bls.n	8003a6c <__itoa+0x14>
 8003a62:	2300      	movs	r3, #0
 8003a64:	700b      	strb	r3, [r1, #0]
 8003a66:	461c      	mov	r4, r3
 8003a68:	4620      	mov	r0, r4
 8003a6a:	bd10      	pop	{r4, pc}
 8003a6c:	2a0a      	cmp	r2, #10
 8003a6e:	d109      	bne.n	8003a84 <__itoa+0x2c>
 8003a70:	2800      	cmp	r0, #0
 8003a72:	da07      	bge.n	8003a84 <__itoa+0x2c>
 8003a74:	232d      	movs	r3, #45	; 0x2d
 8003a76:	700b      	strb	r3, [r1, #0]
 8003a78:	4240      	negs	r0, r0
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	4421      	add	r1, r4
 8003a7e:	f000 f80d 	bl	8003a9c <__utoa>
 8003a82:	e7f1      	b.n	8003a68 <__itoa+0x10>
 8003a84:	2100      	movs	r1, #0
 8003a86:	e7f9      	b.n	8003a7c <__itoa+0x24>

08003a88 <itoa>:
 8003a88:	f7ff bfe6 	b.w	8003a58 <__itoa>

08003a8c <memset>:
 8003a8c:	4402      	add	r2, r0
 8003a8e:	4603      	mov	r3, r0
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d100      	bne.n	8003a96 <memset+0xa>
 8003a94:	4770      	bx	lr
 8003a96:	f803 1b01 	strb.w	r1, [r3], #1
 8003a9a:	e7f9      	b.n	8003a90 <memset+0x4>

08003a9c <__utoa>:
 8003a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a9e:	4c1f      	ldr	r4, [pc, #124]	; (8003b1c <__utoa+0x80>)
 8003aa0:	b08b      	sub	sp, #44	; 0x2c
 8003aa2:	4605      	mov	r5, r0
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	466e      	mov	r6, sp
 8003aa8:	f104 0c20 	add.w	ip, r4, #32
 8003aac:	6820      	ldr	r0, [r4, #0]
 8003aae:	6861      	ldr	r1, [r4, #4]
 8003ab0:	4637      	mov	r7, r6
 8003ab2:	c703      	stmia	r7!, {r0, r1}
 8003ab4:	3408      	adds	r4, #8
 8003ab6:	4564      	cmp	r4, ip
 8003ab8:	463e      	mov	r6, r7
 8003aba:	d1f7      	bne.n	8003aac <__utoa+0x10>
 8003abc:	7921      	ldrb	r1, [r4, #4]
 8003abe:	7139      	strb	r1, [r7, #4]
 8003ac0:	1e91      	subs	r1, r2, #2
 8003ac2:	6820      	ldr	r0, [r4, #0]
 8003ac4:	6038      	str	r0, [r7, #0]
 8003ac6:	2922      	cmp	r1, #34	; 0x22
 8003ac8:	f04f 0100 	mov.w	r1, #0
 8003acc:	d904      	bls.n	8003ad8 <__utoa+0x3c>
 8003ace:	7019      	strb	r1, [r3, #0]
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	b00b      	add	sp, #44	; 0x2c
 8003ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ad8:	1e58      	subs	r0, r3, #1
 8003ada:	4684      	mov	ip, r0
 8003adc:	fbb5 f7f2 	udiv	r7, r5, r2
 8003ae0:	fb02 5617 	mls	r6, r2, r7, r5
 8003ae4:	3628      	adds	r6, #40	; 0x28
 8003ae6:	446e      	add	r6, sp
 8003ae8:	460c      	mov	r4, r1
 8003aea:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8003aee:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8003af2:	462e      	mov	r6, r5
 8003af4:	42b2      	cmp	r2, r6
 8003af6:	f101 0101 	add.w	r1, r1, #1
 8003afa:	463d      	mov	r5, r7
 8003afc:	d9ee      	bls.n	8003adc <__utoa+0x40>
 8003afe:	2200      	movs	r2, #0
 8003b00:	545a      	strb	r2, [r3, r1]
 8003b02:	1919      	adds	r1, r3, r4
 8003b04:	1aa5      	subs	r5, r4, r2
 8003b06:	42aa      	cmp	r2, r5
 8003b08:	dae3      	bge.n	8003ad2 <__utoa+0x36>
 8003b0a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003b0e:	780e      	ldrb	r6, [r1, #0]
 8003b10:	7006      	strb	r6, [r0, #0]
 8003b12:	3201      	adds	r2, #1
 8003b14:	f801 5901 	strb.w	r5, [r1], #-1
 8003b18:	e7f4      	b.n	8003b04 <__utoa+0x68>
 8003b1a:	bf00      	nop
 8003b1c:	08003b7c 	.word	0x08003b7c

08003b20 <_init>:
 8003b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b22:	bf00      	nop
 8003b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b26:	bc08      	pop	{r3}
 8003b28:	469e      	mov	lr, r3
 8003b2a:	4770      	bx	lr

08003b2c <_fini>:
 8003b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b2e:	bf00      	nop
 8003b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b32:	bc08      	pop	{r3}
 8003b34:	469e      	mov	lr, r3
 8003b36:	4770      	bx	lr
